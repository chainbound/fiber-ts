// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.types.H1024', null, global);
goog.exportSymbol('proto.types.H128', null, global);
goog.exportSymbol('proto.types.H160', null, global);
goog.exportSymbol('proto.types.H2048', null, global);
goog.exportSymbol('proto.types.H256', null, global);
goog.exportSymbol('proto.types.H512', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H128 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H128, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H128.displayName = 'proto.types.H128';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H160 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H160, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H160.displayName = 'proto.types.H160';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H256 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H256, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H256.displayName = 'proto.types.H256';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H512 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H512, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H512.displayName = 'proto.types.H512';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H1024 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H1024, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H1024.displayName = 'proto.types.H1024';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H2048 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H2048, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H2048.displayName = 'proto.types.H2048';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H128.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H128.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H128} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H128.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lo: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H128}
 */
proto.types.H128.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H128;
  return proto.types.H128.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H128} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H128}
 */
proto.types.H128.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H128.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H128.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H128} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H128.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLo();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 hi = 1;
 * @return {number}
 */
proto.types.H128.prototype.getHi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.H128} returns this
 */
proto.types.H128.prototype.setHi = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 lo = 2;
 * @return {number}
 */
proto.types.H128.prototype.getLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.H128} returns this
 */
proto.types.H128.prototype.setLo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H160.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H160.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H160} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H160.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H128.toObject(includeInstance, f),
    lo: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H160}
 */
proto.types.H160.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H160;
  return proto.types.H160.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H160} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H160}
 */
proto.types.H160.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H128;
      reader.readMessage(value,proto.types.H128.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H160.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H160.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H160} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H160.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H128.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional H128 hi = 1;
 * @return {?proto.types.H128}
 */
proto.types.H160.prototype.getHi = function() {
  return /** @type{?proto.types.H128} */ (
    jspb.Message.getWrapperField(this, proto.types.H128, 1));
};


/**
 * @param {?proto.types.H128|undefined} value
 * @return {!proto.types.H160} returns this
*/
proto.types.H160.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H160} returns this
 */
proto.types.H160.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H160.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 lo = 2;
 * @return {number}
 */
proto.types.H160.prototype.getLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.H160} returns this
 */
proto.types.H160.prototype.setLo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H256.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H256.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H256} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H256.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H128.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H128.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H256}
 */
proto.types.H256.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H256;
  return proto.types.H256.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H256} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H256}
 */
proto.types.H256.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H128;
      reader.readMessage(value,proto.types.H128.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H128;
      reader.readMessage(value,proto.types.H128.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H256.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H256.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H256} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H256.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H128.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H128.serializeBinaryToWriter
    );
  }
};


/**
 * optional H128 hi = 1;
 * @return {?proto.types.H128}
 */
proto.types.H256.prototype.getHi = function() {
  return /** @type{?proto.types.H128} */ (
    jspb.Message.getWrapperField(this, proto.types.H128, 1));
};


/**
 * @param {?proto.types.H128|undefined} value
 * @return {!proto.types.H256} returns this
*/
proto.types.H256.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H256} returns this
 */
proto.types.H256.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H256.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H128 lo = 2;
 * @return {?proto.types.H128}
 */
proto.types.H256.prototype.getLo = function() {
  return /** @type{?proto.types.H128} */ (
    jspb.Message.getWrapperField(this, proto.types.H128, 2));
};


/**
 * @param {?proto.types.H128|undefined} value
 * @return {!proto.types.H256} returns this
*/
proto.types.H256.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H256} returns this
 */
proto.types.H256.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H256.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H512.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H512.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H512} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H512.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H256.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H512}
 */
proto.types.H512.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H512;
  return proto.types.H512.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H512} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H512}
 */
proto.types.H512.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H512.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H512.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H512} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H512.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
};


/**
 * optional H256 hi = 1;
 * @return {?proto.types.H256}
 */
proto.types.H512.prototype.getHi = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 1));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.H512} returns this
*/
proto.types.H512.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H512} returns this
 */
proto.types.H512.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H512.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H256 lo = 2;
 * @return {?proto.types.H256}
 */
proto.types.H512.prototype.getLo = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 2));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.H512} returns this
*/
proto.types.H512.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H512} returns this
 */
proto.types.H512.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H512.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H1024.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H1024.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H1024} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H1024.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H512.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H512.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H1024}
 */
proto.types.H1024.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H1024;
  return proto.types.H1024.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H1024} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H1024}
 */
proto.types.H1024.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H512;
      reader.readMessage(value,proto.types.H512.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H512;
      reader.readMessage(value,proto.types.H512.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H1024.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H1024.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H1024} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H1024.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H512.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H512.serializeBinaryToWriter
    );
  }
};


/**
 * optional H512 hi = 1;
 * @return {?proto.types.H512}
 */
proto.types.H1024.prototype.getHi = function() {
  return /** @type{?proto.types.H512} */ (
    jspb.Message.getWrapperField(this, proto.types.H512, 1));
};


/**
 * @param {?proto.types.H512|undefined} value
 * @return {!proto.types.H1024} returns this
*/
proto.types.H1024.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H1024} returns this
 */
proto.types.H1024.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H1024.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H512 lo = 2;
 * @return {?proto.types.H512}
 */
proto.types.H1024.prototype.getLo = function() {
  return /** @type{?proto.types.H512} */ (
    jspb.Message.getWrapperField(this, proto.types.H512, 2));
};


/**
 * @param {?proto.types.H512|undefined} value
 * @return {!proto.types.H1024} returns this
*/
proto.types.H1024.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H1024} returns this
 */
proto.types.H1024.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H1024.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H2048.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H2048.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H2048} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H2048.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H1024.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H1024.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H2048}
 */
proto.types.H2048.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H2048;
  return proto.types.H2048.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H2048} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H2048}
 */
proto.types.H2048.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H1024;
      reader.readMessage(value,proto.types.H1024.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H1024;
      reader.readMessage(value,proto.types.H1024.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H2048.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H2048.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H2048} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H2048.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H1024.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H1024.serializeBinaryToWriter
    );
  }
};


/**
 * optional H1024 hi = 1;
 * @return {?proto.types.H1024}
 */
proto.types.H2048.prototype.getHi = function() {
  return /** @type{?proto.types.H1024} */ (
    jspb.Message.getWrapperField(this, proto.types.H1024, 1));
};


/**
 * @param {?proto.types.H1024|undefined} value
 * @return {!proto.types.H2048} returns this
*/
proto.types.H2048.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H2048} returns this
 */
proto.types.H2048.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H2048.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H1024 lo = 2;
 * @return {?proto.types.H1024}
 */
proto.types.H2048.prototype.getLo = function() {
  return /** @type{?proto.types.H1024} */ (
    jspb.Message.getWrapperField(this, proto.types.H1024, 2));
};


/**
 * @param {?proto.types.H1024|undefined} value
 * @return {!proto.types.H2048} returns this
*/
proto.types.H2048.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H2048} returns this
 */
proto.types.H2048.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H2048.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.types);
