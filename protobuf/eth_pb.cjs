// source: eth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.eth.AccessTuple', null, global);
goog.exportSymbol('proto.eth.Attestation', null, global);
goog.exportSymbol('proto.eth.AttestationData', null, global);
goog.exportSymbol('proto.eth.AttesterSlashing', null, global);
goog.exportSymbol('proto.eth.BLSToExecutionChange', null, global);
goog.exportSymbol('proto.eth.BeaconBlock', null, global);
goog.exportSymbol('proto.eth.BeaconBlockBody', null, global);
goog.exportSymbol('proto.eth.BeaconBlockHeader', null, global);
goog.exportSymbol('proto.eth.Checkpoint', null, global);
goog.exportSymbol('proto.eth.CompactBeaconBlock', null, global);
goog.exportSymbol('proto.eth.CompactBeaconBlockBody', null, global);
goog.exportSymbol('proto.eth.Deposit', null, global);
goog.exportSymbol('proto.eth.DepositData', null, global);
goog.exportSymbol('proto.eth.Eth1Data', null, global);
goog.exportSymbol('proto.eth.ExecutionPayload', null, global);
goog.exportSymbol('proto.eth.ExecutionPayloadHeader', null, global);
goog.exportSymbol('proto.eth.IndexedAttestation', null, global);
goog.exportSymbol('proto.eth.ProposerSlashing', null, global);
goog.exportSymbol('proto.eth.SignedBLSToExecutionChange', null, global);
goog.exportSymbol('proto.eth.SignedBeaconBlock', null, global);
goog.exportSymbol('proto.eth.SignedBeaconBlockHeader', null, global);
goog.exportSymbol('proto.eth.SignedVoluntaryExit', null, global);
goog.exportSymbol('proto.eth.SyncAggregate', null, global);
goog.exportSymbol('proto.eth.Transaction', null, global);
goog.exportSymbol('proto.eth.VoluntaryExit', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.Transaction.repeatedFields_, null);
};
goog.inherits(proto.eth.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.Transaction.displayName = 'proto.eth.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.AccessTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.AccessTuple.repeatedFields_, null);
};
goog.inherits(proto.eth.AccessTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.AccessTuple.displayName = 'proto.eth.AccessTuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.ExecutionPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.ExecutionPayload.repeatedFields_, null);
};
goog.inherits(proto.eth.ExecutionPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.ExecutionPayload.displayName = 'proto.eth.ExecutionPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.ExecutionPayloadHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.ExecutionPayloadHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.ExecutionPayloadHeader.displayName = 'proto.eth.ExecutionPayloadHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.BeaconBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.BeaconBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.BeaconBlock.displayName = 'proto.eth.BeaconBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.CompactBeaconBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.CompactBeaconBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.CompactBeaconBlock.displayName = 'proto.eth.CompactBeaconBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.SignedBeaconBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.SignedBeaconBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.SignedBeaconBlock.displayName = 'proto.eth.SignedBeaconBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.BeaconBlockBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.BeaconBlockBody.repeatedFields_, null);
};
goog.inherits(proto.eth.BeaconBlockBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.BeaconBlockBody.displayName = 'proto.eth.BeaconBlockBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.CompactBeaconBlockBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.CompactBeaconBlockBody.repeatedFields_, null);
};
goog.inherits(proto.eth.CompactBeaconBlockBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.CompactBeaconBlockBody.displayName = 'proto.eth.CompactBeaconBlockBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.SignedBeaconBlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.SignedBeaconBlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.SignedBeaconBlockHeader.displayName = 'proto.eth.SignedBeaconBlockHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.BeaconBlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.BeaconBlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.BeaconBlockHeader.displayName = 'proto.eth.BeaconBlockHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.Eth1Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.Eth1Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.Eth1Data.displayName = 'proto.eth.Eth1Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.SignedVoluntaryExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.SignedVoluntaryExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.SignedVoluntaryExit.displayName = 'proto.eth.SignedVoluntaryExit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.VoluntaryExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.VoluntaryExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.VoluntaryExit.displayName = 'proto.eth.VoluntaryExit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.ProposerSlashing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.ProposerSlashing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.ProposerSlashing.displayName = 'proto.eth.ProposerSlashing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.AttesterSlashing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.AttesterSlashing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.AttesterSlashing.displayName = 'proto.eth.AttesterSlashing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.IndexedAttestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.IndexedAttestation.repeatedFields_, null);
};
goog.inherits(proto.eth.IndexedAttestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.IndexedAttestation.displayName = 'proto.eth.IndexedAttestation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.AttestationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.AttestationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.AttestationData.displayName = 'proto.eth.AttestationData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.Checkpoint.displayName = 'proto.eth.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.Attestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.Attestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.Attestation.displayName = 'proto.eth.Attestation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.Deposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eth.Deposit.repeatedFields_, null);
};
goog.inherits(proto.eth.Deposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.Deposit.displayName = 'proto.eth.Deposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.DepositData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.DepositData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.DepositData.displayName = 'proto.eth.DepositData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.SyncAggregate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.SyncAggregate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.SyncAggregate.displayName = 'proto.eth.SyncAggregate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.SignedBLSToExecutionChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.SignedBLSToExecutionChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.SignedBLSToExecutionChange.displayName = 'proto.eth.SignedBLSToExecutionChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eth.BLSToExecutionChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eth.BLSToExecutionChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eth.BLSToExecutionChange.displayName = 'proto.eth.BLSToExecutionChange';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.Transaction.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: msg.getTo_asB64(),
    gas: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: msg.getHash_asB64(),
    input: msg.getInput_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
    value: msg.getValue_asB64(),
    from: msg.getFrom_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    maxFee: jspb.Message.getFieldWithDefault(msg, 10, 0),
    priorityFee: jspb.Message.getFieldWithDefault(msg, 11, 0),
    v: jspb.Message.getFieldWithDefault(msg, 12, 0),
    r: msg.getR_asB64(),
    s: msg.getS_asB64(),
    chainid: jspb.Message.getFieldWithDefault(msg, 15, 0),
    accessListList: jspb.Message.toObjectList(msg.getAccessListList(),
    proto.eth.AccessTuple.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.Transaction}
 */
proto.eth.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.Transaction;
  return proto.eth.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.Transaction}
 */
proto.eth.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasPrice(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxFee(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriorityFee(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setV(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainid(value);
      break;
    case 16:
      var value = new proto.eth.AccessTuple;
      reader.readMessage(value,proto.eth.AccessTuple.deserializeBinaryFromReader);
      msg.addAccessList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMaxFee();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getPriorityFee();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getV();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getChainid();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getAccessListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.eth.AccessTuple.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes to = 1;
 * @return {string}
 */
proto.eth.Transaction.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setTo = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.clearTo = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.Transaction.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 gas = 2;
 * @return {number}
 */
proto.eth.Transaction.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 gas_price = 3;
 * @return {number}
 */
proto.eth.Transaction.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes hash = 4;
 * @return {string}
 */
proto.eth.Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes input = 5;
 * @return {string}
 */
proto.eth.Transaction.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes input = 5;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes input = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setInput = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 nonce = 6;
 * @return {number}
 */
proto.eth.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes value = 7;
 * @return {string}
 */
proto.eth.Transaction.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes value = 7;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes from = 8;
 * @return {string}
 */
proto.eth.Transaction.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes from = 8;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setFrom = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.clearFrom = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.Transaction.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 type = 9;
 * @return {number}
 */
proto.eth.Transaction.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 max_fee = 10;
 * @return {number}
 */
proto.eth.Transaction.prototype.getMaxFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setMaxFee = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 priority_fee = 11;
 * @return {number}
 */
proto.eth.Transaction.prototype.getPriorityFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setPriorityFee = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 v = 12;
 * @return {number}
 */
proto.eth.Transaction.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setV = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes r = 13;
 * @return {string}
 */
proto.eth.Transaction.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes r = 13;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes s = 14;
 * @return {string}
 */
proto.eth.Transaction.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes s = 14;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.eth.Transaction.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.eth.Transaction.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional uint32 chainId = 15;
 * @return {number}
 */
proto.eth.Transaction.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.setChainid = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * repeated AccessTuple access_list = 16;
 * @return {!Array<!proto.eth.AccessTuple>}
 */
proto.eth.Transaction.prototype.getAccessListList = function() {
  return /** @type{!Array<!proto.eth.AccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.AccessTuple, 16));
};


/**
 * @param {!Array<!proto.eth.AccessTuple>} value
 * @return {!proto.eth.Transaction} returns this
*/
proto.eth.Transaction.prototype.setAccessListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.eth.AccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.AccessTuple}
 */
proto.eth.Transaction.prototype.addAccessList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.eth.AccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.Transaction} returns this
 */
proto.eth.Transaction.prototype.clearAccessListList = function() {
  return this.setAccessListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.AccessTuple.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.AccessTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.AccessTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.AccessTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.AccessTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    storageKeysList: msg.getStorageKeysList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.AccessTuple}
 */
proto.eth.AccessTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.AccessTuple;
  return proto.eth.AccessTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.AccessTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.AccessTuple}
 */
proto.eth.AccessTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addStorageKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.AccessTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.AccessTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.AccessTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.AccessTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStorageKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.eth.AccessTuple.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.eth.AccessTuple.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.eth.AccessTuple.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.AccessTuple} returns this
 */
proto.eth.AccessTuple.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes storage_keys = 2;
 * @return {!Array<string>}
 */
proto.eth.AccessTuple.prototype.getStorageKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes storage_keys = 2;
 * This is a type-conversion wrapper around `getStorageKeysList()`
 * @return {!Array<string>}
 */
proto.eth.AccessTuple.prototype.getStorageKeysList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getStorageKeysList()));
};


/**
 * repeated bytes storage_keys = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStorageKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.eth.AccessTuple.prototype.getStorageKeysList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getStorageKeysList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.eth.AccessTuple} returns this
 */
proto.eth.AccessTuple.prototype.setStorageKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.eth.AccessTuple} returns this
 */
proto.eth.AccessTuple.prototype.addStorageKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.AccessTuple} returns this
 */
proto.eth.AccessTuple.prototype.clearStorageKeysList = function() {
  return this.setStorageKeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.ExecutionPayload.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.ExecutionPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.ExecutionPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.ExecutionPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.ExecutionPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.eth.ExecutionPayloadHeader.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.eth.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.ExecutionPayload}
 */
proto.eth.ExecutionPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.ExecutionPayload;
  return proto.eth.ExecutionPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.ExecutionPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.ExecutionPayload}
 */
proto.eth.ExecutionPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.ExecutionPayloadHeader;
      reader.readMessage(value,proto.eth.ExecutionPayloadHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.eth.Transaction;
      reader.readMessage(value,proto.eth.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.ExecutionPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.ExecutionPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.ExecutionPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.ExecutionPayloadHeader.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.eth.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExecutionPayloadHeader header = 1;
 * @return {?proto.eth.ExecutionPayloadHeader}
 */
proto.eth.ExecutionPayload.prototype.getHeader = function() {
  return /** @type{?proto.eth.ExecutionPayloadHeader} */ (
    jspb.Message.getWrapperField(this, proto.eth.ExecutionPayloadHeader, 1));
};


/**
 * @param {?proto.eth.ExecutionPayloadHeader|undefined} value
 * @return {!proto.eth.ExecutionPayload} returns this
*/
proto.eth.ExecutionPayload.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.ExecutionPayload} returns this
 */
proto.eth.ExecutionPayload.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.ExecutionPayload.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Transaction transactions = 2;
 * @return {!Array<!proto.eth.Transaction>}
 */
proto.eth.ExecutionPayload.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.eth.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.Transaction, 2));
};


/**
 * @param {!Array<!proto.eth.Transaction>} value
 * @return {!proto.eth.ExecutionPayload} returns this
*/
proto.eth.ExecutionPayload.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.eth.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.Transaction}
 */
proto.eth.ExecutionPayload.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.eth.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.ExecutionPayload} returns this
 */
proto.eth.ExecutionPayload.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.ExecutionPayloadHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.ExecutionPayloadHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.ExecutionPayloadHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.ExecutionPayloadHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentHash: msg.getParentHash_asB64(),
    feeRecipient: msg.getFeeRecipient_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    receiptsRoot: msg.getReceiptsRoot_asB64(),
    logsBloom: msg.getLogsBloom_asB64(),
    prevRandao: msg.getPrevRandao_asB64(),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 9, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    extraData: msg.getExtraData_asB64(),
    baseFeePerGas: msg.getBaseFeePerGas_asB64(),
    blockHash: msg.getBlockHash_asB64(),
    transactionsRoot: msg.getTransactionsRoot_asB64(),
    withdrawalsRoot: msg.getWithdrawalsRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.ExecutionPayloadHeader}
 */
proto.eth.ExecutionPayloadHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.ExecutionPayloadHeader;
  return proto.eth.ExecutionPayloadHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.ExecutionPayloadHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.ExecutionPayloadHeader}
 */
proto.eth.ExecutionPayloadHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeeRecipient(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptsRoot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsBloom(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevRandao(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtraData(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBaseFeePerGas(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionsRoot(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWithdrawalsRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.ExecutionPayloadHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.ExecutionPayloadHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.ExecutionPayloadHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFeeRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getReceiptsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getLogsBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPrevRandao_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getExtraData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getBaseFeePerGas_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getTransactionsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional bytes parent_hash = 1;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getParentHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes parent_hash = 1;
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getParentHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentHash()));
};


/**
 * optional bytes parent_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getParentHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setParentHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes fee_recipient = 2;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getFeeRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes fee_recipient = 2;
 * This is a type-conversion wrapper around `getFeeRecipient()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getFeeRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeeRecipient()));
};


/**
 * optional bytes fee_recipient = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeeRecipient()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getFeeRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeeRecipient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setFeeRecipient = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes state_root = 3;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getStateRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes state_root = 3;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes receipts_root = 4;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getReceiptsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes receipts_root = 4;
 * This is a type-conversion wrapper around `getReceiptsRoot()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getReceiptsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptsRoot()));
};


/**
 * optional bytes receipts_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptsRoot()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getReceiptsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setReceiptsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes logs_bloom = 5;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getLogsBloom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes logs_bloom = 5;
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getLogsBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsBloom()));
};


/**
 * optional bytes logs_bloom = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getLogsBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsBloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setLogsBloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes prev_randao = 6;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getPrevRandao = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes prev_randao = 6;
 * This is a type-conversion wrapper around `getPrevRandao()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getPrevRandao_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevRandao()));
};


/**
 * optional bytes prev_randao = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevRandao()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getPrevRandao_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevRandao()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setPrevRandao = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 block_number = 7;
 * @return {number}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 gas_limit = 8;
 * @return {number}
 */
proto.eth.ExecutionPayloadHeader.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 gas_used = 9;
 * @return {number}
 */
proto.eth.ExecutionPayloadHeader.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 timestamp = 10;
 * @return {number}
 */
proto.eth.ExecutionPayloadHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes extra_data = 11;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getExtraData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes extra_data = 11;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getExtraData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtraData()));
};


/**
 * optional bytes extra_data = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getExtraData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtraData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes base_fee_per_gas = 12;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBaseFeePerGas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes base_fee_per_gas = 12;
 * This is a type-conversion wrapper around `getBaseFeePerGas()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBaseFeePerGas_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBaseFeePerGas()));
};


/**
 * optional bytes base_fee_per_gas = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBaseFeePerGas()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBaseFeePerGas_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBaseFeePerGas()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setBaseFeePerGas = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes block_hash = 13;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes block_hash = 13;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes transactions_root = 14;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getTransactionsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes transactions_root = 14;
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getTransactionsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionsRoot()));
};


/**
 * optional bytes transactions_root = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getTransactionsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setTransactionsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes withdrawals_root = 15;
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getWithdrawalsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes withdrawals_root = 15;
 * This is a type-conversion wrapper around `getWithdrawalsRoot()`
 * @return {string}
 */
proto.eth.ExecutionPayloadHeader.prototype.getWithdrawalsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWithdrawalsRoot()));
};


/**
 * optional bytes withdrawals_root = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWithdrawalsRoot()`
 * @return {!Uint8Array}
 */
proto.eth.ExecutionPayloadHeader.prototype.getWithdrawalsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWithdrawalsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.setWithdrawalsRoot = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.eth.ExecutionPayloadHeader} returns this
 */
proto.eth.ExecutionPayloadHeader.prototype.clearWithdrawalsRoot = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.ExecutionPayloadHeader.prototype.hasWithdrawalsRoot = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.BeaconBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.BeaconBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.BeaconBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BeaconBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    proposerIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parentRoot: msg.getParentRoot_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    body: (f = msg.getBody()) && proto.eth.BeaconBlockBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.BeaconBlock}
 */
proto.eth.BeaconBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.BeaconBlock;
  return proto.eth.BeaconBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.BeaconBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.BeaconBlock}
 */
proto.eth.BeaconBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProposerIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 5:
      var value = new proto.eth.BeaconBlockBody;
      reader.readMessage(value,proto.eth.BeaconBlockBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.BeaconBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.BeaconBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BeaconBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProposerIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getParentRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.eth.BeaconBlockBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.eth.BeaconBlock.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.BeaconBlock} returns this
 */
proto.eth.BeaconBlock.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 proposer_index = 2;
 * @return {number}
 */
proto.eth.BeaconBlock.prototype.getProposerIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.BeaconBlock} returns this
 */
proto.eth.BeaconBlock.prototype.setProposerIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes parent_root = 3;
 * @return {string}
 */
proto.eth.BeaconBlock.prototype.getParentRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes parent_root = 3;
 * This is a type-conversion wrapper around `getParentRoot()`
 * @return {string}
 */
proto.eth.BeaconBlock.prototype.getParentRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentRoot()));
};


/**
 * optional bytes parent_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentRoot()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlock.prototype.getParentRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlock} returns this
 */
proto.eth.BeaconBlock.prototype.setParentRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes state_root = 4;
 * @return {string}
 */
proto.eth.BeaconBlock.prototype.getStateRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes state_root = 4;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.eth.BeaconBlock.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlock.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlock} returns this
 */
proto.eth.BeaconBlock.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional BeaconBlockBody body = 5;
 * @return {?proto.eth.BeaconBlockBody}
 */
proto.eth.BeaconBlock.prototype.getBody = function() {
  return /** @type{?proto.eth.BeaconBlockBody} */ (
    jspb.Message.getWrapperField(this, proto.eth.BeaconBlockBody, 5));
};


/**
 * @param {?proto.eth.BeaconBlockBody|undefined} value
 * @return {!proto.eth.BeaconBlock} returns this
*/
proto.eth.BeaconBlock.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.BeaconBlock} returns this
 */
proto.eth.BeaconBlock.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.BeaconBlock.prototype.hasBody = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.CompactBeaconBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.CompactBeaconBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.CompactBeaconBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.CompactBeaconBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    proposerIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parentRoot: msg.getParentRoot_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    body: (f = msg.getBody()) && proto.eth.CompactBeaconBlockBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.CompactBeaconBlock}
 */
proto.eth.CompactBeaconBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.CompactBeaconBlock;
  return proto.eth.CompactBeaconBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.CompactBeaconBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.CompactBeaconBlock}
 */
proto.eth.CompactBeaconBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProposerIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 5:
      var value = new proto.eth.CompactBeaconBlockBody;
      reader.readMessage(value,proto.eth.CompactBeaconBlockBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.CompactBeaconBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.CompactBeaconBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.CompactBeaconBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.CompactBeaconBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProposerIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getParentRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.eth.CompactBeaconBlockBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.eth.CompactBeaconBlock.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.CompactBeaconBlock} returns this
 */
proto.eth.CompactBeaconBlock.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 proposer_index = 2;
 * @return {number}
 */
proto.eth.CompactBeaconBlock.prototype.getProposerIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.CompactBeaconBlock} returns this
 */
proto.eth.CompactBeaconBlock.prototype.setProposerIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes parent_root = 3;
 * @return {string}
 */
proto.eth.CompactBeaconBlock.prototype.getParentRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes parent_root = 3;
 * This is a type-conversion wrapper around `getParentRoot()`
 * @return {string}
 */
proto.eth.CompactBeaconBlock.prototype.getParentRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentRoot()));
};


/**
 * optional bytes parent_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentRoot()`
 * @return {!Uint8Array}
 */
proto.eth.CompactBeaconBlock.prototype.getParentRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.CompactBeaconBlock} returns this
 */
proto.eth.CompactBeaconBlock.prototype.setParentRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes state_root = 4;
 * @return {string}
 */
proto.eth.CompactBeaconBlock.prototype.getStateRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes state_root = 4;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.eth.CompactBeaconBlock.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.eth.CompactBeaconBlock.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.CompactBeaconBlock} returns this
 */
proto.eth.CompactBeaconBlock.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional CompactBeaconBlockBody body = 5;
 * @return {?proto.eth.CompactBeaconBlockBody}
 */
proto.eth.CompactBeaconBlock.prototype.getBody = function() {
  return /** @type{?proto.eth.CompactBeaconBlockBody} */ (
    jspb.Message.getWrapperField(this, proto.eth.CompactBeaconBlockBody, 5));
};


/**
 * @param {?proto.eth.CompactBeaconBlockBody|undefined} value
 * @return {!proto.eth.CompactBeaconBlock} returns this
*/
proto.eth.CompactBeaconBlock.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.CompactBeaconBlock} returns this
 */
proto.eth.CompactBeaconBlock.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.CompactBeaconBlock.prototype.hasBody = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.SignedBeaconBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.SignedBeaconBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.SignedBeaconBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedBeaconBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.eth.BeaconBlock.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.SignedBeaconBlock}
 */
proto.eth.SignedBeaconBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.SignedBeaconBlock;
  return proto.eth.SignedBeaconBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.SignedBeaconBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.SignedBeaconBlock}
 */
proto.eth.SignedBeaconBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.BeaconBlock;
      reader.readMessage(value,proto.eth.BeaconBlock.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.SignedBeaconBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.SignedBeaconBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.SignedBeaconBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedBeaconBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.BeaconBlock.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional BeaconBlock message = 1;
 * @return {?proto.eth.BeaconBlock}
 */
proto.eth.SignedBeaconBlock.prototype.getMessage = function() {
  return /** @type{?proto.eth.BeaconBlock} */ (
    jspb.Message.getWrapperField(this, proto.eth.BeaconBlock, 1));
};


/**
 * @param {?proto.eth.BeaconBlock|undefined} value
 * @return {!proto.eth.SignedBeaconBlock} returns this
*/
proto.eth.SignedBeaconBlock.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.SignedBeaconBlock} returns this
 */
proto.eth.SignedBeaconBlock.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.SignedBeaconBlock.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.eth.SignedBeaconBlock.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.SignedBeaconBlock.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.SignedBeaconBlock.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.SignedBeaconBlock} returns this
 */
proto.eth.SignedBeaconBlock.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.BeaconBlockBody.repeatedFields_ = [4,5,6,7,8,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.BeaconBlockBody.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.BeaconBlockBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.BeaconBlockBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BeaconBlockBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    randaoReveal: msg.getRandaoReveal_asB64(),
    eth1Data: (f = msg.getEth1Data()) && proto.eth.Eth1Data.toObject(includeInstance, f),
    graffiti: msg.getGraffiti_asB64(),
    proposerSlashingsList: jspb.Message.toObjectList(msg.getProposerSlashingsList(),
    proto.eth.ProposerSlashing.toObject, includeInstance),
    attesterSlashingsList: jspb.Message.toObjectList(msg.getAttesterSlashingsList(),
    proto.eth.AttesterSlashing.toObject, includeInstance),
    attestationsList: jspb.Message.toObjectList(msg.getAttestationsList(),
    proto.eth.Attestation.toObject, includeInstance),
    depositsList: jspb.Message.toObjectList(msg.getDepositsList(),
    proto.eth.Deposit.toObject, includeInstance),
    voluntaryExitsList: jspb.Message.toObjectList(msg.getVoluntaryExitsList(),
    proto.eth.SignedVoluntaryExit.toObject, includeInstance),
    syncAggregate: (f = msg.getSyncAggregate()) && proto.eth.SyncAggregate.toObject(includeInstance, f),
    executionPayload: (f = msg.getExecutionPayload()) && proto.eth.ExecutionPayload.toObject(includeInstance, f),
    blsToExecutionChangesList: jspb.Message.toObjectList(msg.getBlsToExecutionChangesList(),
    proto.eth.SignedBLSToExecutionChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.BeaconBlockBody}
 */
proto.eth.BeaconBlockBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.BeaconBlockBody;
  return proto.eth.BeaconBlockBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.BeaconBlockBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.BeaconBlockBody}
 */
proto.eth.BeaconBlockBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandaoReveal(value);
      break;
    case 2:
      var value = new proto.eth.Eth1Data;
      reader.readMessage(value,proto.eth.Eth1Data.deserializeBinaryFromReader);
      msg.setEth1Data(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGraffiti(value);
      break;
    case 4:
      var value = new proto.eth.ProposerSlashing;
      reader.readMessage(value,proto.eth.ProposerSlashing.deserializeBinaryFromReader);
      msg.addProposerSlashings(value);
      break;
    case 5:
      var value = new proto.eth.AttesterSlashing;
      reader.readMessage(value,proto.eth.AttesterSlashing.deserializeBinaryFromReader);
      msg.addAttesterSlashings(value);
      break;
    case 6:
      var value = new proto.eth.Attestation;
      reader.readMessage(value,proto.eth.Attestation.deserializeBinaryFromReader);
      msg.addAttestations(value);
      break;
    case 7:
      var value = new proto.eth.Deposit;
      reader.readMessage(value,proto.eth.Deposit.deserializeBinaryFromReader);
      msg.addDeposits(value);
      break;
    case 8:
      var value = new proto.eth.SignedVoluntaryExit;
      reader.readMessage(value,proto.eth.SignedVoluntaryExit.deserializeBinaryFromReader);
      msg.addVoluntaryExits(value);
      break;
    case 9:
      var value = new proto.eth.SyncAggregate;
      reader.readMessage(value,proto.eth.SyncAggregate.deserializeBinaryFromReader);
      msg.setSyncAggregate(value);
      break;
    case 10:
      var value = new proto.eth.ExecutionPayload;
      reader.readMessage(value,proto.eth.ExecutionPayload.deserializeBinaryFromReader);
      msg.setExecutionPayload(value);
      break;
    case 11:
      var value = new proto.eth.SignedBLSToExecutionChange;
      reader.readMessage(value,proto.eth.SignedBLSToExecutionChange.deserializeBinaryFromReader);
      msg.addBlsToExecutionChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.BeaconBlockBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.BeaconBlockBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BeaconBlockBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandaoReveal_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEth1Data();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.Eth1Data.serializeBinaryToWriter
    );
  }
  f = message.getGraffiti_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProposerSlashingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.eth.ProposerSlashing.serializeBinaryToWriter
    );
  }
  f = message.getAttesterSlashingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.eth.AttesterSlashing.serializeBinaryToWriter
    );
  }
  f = message.getAttestationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.eth.Attestation.serializeBinaryToWriter
    );
  }
  f = message.getDepositsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.eth.Deposit.serializeBinaryToWriter
    );
  }
  f = message.getVoluntaryExitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.eth.SignedVoluntaryExit.serializeBinaryToWriter
    );
  }
  f = message.getSyncAggregate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.eth.SyncAggregate.serializeBinaryToWriter
    );
  }
  f = message.getExecutionPayload();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.eth.ExecutionPayload.serializeBinaryToWriter
    );
  }
  f = message.getBlsToExecutionChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.eth.SignedBLSToExecutionChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes randao_reveal = 1;
 * @return {string}
 */
proto.eth.BeaconBlockBody.prototype.getRandaoReveal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes randao_reveal = 1;
 * This is a type-conversion wrapper around `getRandaoReveal()`
 * @return {string}
 */
proto.eth.BeaconBlockBody.prototype.getRandaoReveal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandaoReveal()));
};


/**
 * optional bytes randao_reveal = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandaoReveal()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockBody.prototype.getRandaoReveal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandaoReveal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.setRandaoReveal = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Eth1Data eth1_data = 2;
 * @return {?proto.eth.Eth1Data}
 */
proto.eth.BeaconBlockBody.prototype.getEth1Data = function() {
  return /** @type{?proto.eth.Eth1Data} */ (
    jspb.Message.getWrapperField(this, proto.eth.Eth1Data, 2));
};


/**
 * @param {?proto.eth.Eth1Data|undefined} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setEth1Data = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearEth1Data = function() {
  return this.setEth1Data(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.BeaconBlockBody.prototype.hasEth1Data = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes graffiti = 3;
 * @return {string}
 */
proto.eth.BeaconBlockBody.prototype.getGraffiti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes graffiti = 3;
 * This is a type-conversion wrapper around `getGraffiti()`
 * @return {string}
 */
proto.eth.BeaconBlockBody.prototype.getGraffiti_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGraffiti()));
};


/**
 * optional bytes graffiti = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGraffiti()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockBody.prototype.getGraffiti_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGraffiti()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.setGraffiti = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated ProposerSlashing proposer_slashings = 4;
 * @return {!Array<!proto.eth.ProposerSlashing>}
 */
proto.eth.BeaconBlockBody.prototype.getProposerSlashingsList = function() {
  return /** @type{!Array<!proto.eth.ProposerSlashing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.ProposerSlashing, 4));
};


/**
 * @param {!Array<!proto.eth.ProposerSlashing>} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setProposerSlashingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.eth.ProposerSlashing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.ProposerSlashing}
 */
proto.eth.BeaconBlockBody.prototype.addProposerSlashings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.eth.ProposerSlashing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearProposerSlashingsList = function() {
  return this.setProposerSlashingsList([]);
};


/**
 * repeated AttesterSlashing attester_slashings = 5;
 * @return {!Array<!proto.eth.AttesterSlashing>}
 */
proto.eth.BeaconBlockBody.prototype.getAttesterSlashingsList = function() {
  return /** @type{!Array<!proto.eth.AttesterSlashing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.AttesterSlashing, 5));
};


/**
 * @param {!Array<!proto.eth.AttesterSlashing>} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setAttesterSlashingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.eth.AttesterSlashing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.AttesterSlashing}
 */
proto.eth.BeaconBlockBody.prototype.addAttesterSlashings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.eth.AttesterSlashing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearAttesterSlashingsList = function() {
  return this.setAttesterSlashingsList([]);
};


/**
 * repeated Attestation attestations = 6;
 * @return {!Array<!proto.eth.Attestation>}
 */
proto.eth.BeaconBlockBody.prototype.getAttestationsList = function() {
  return /** @type{!Array<!proto.eth.Attestation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.Attestation, 6));
};


/**
 * @param {!Array<!proto.eth.Attestation>} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setAttestationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.eth.Attestation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.Attestation}
 */
proto.eth.BeaconBlockBody.prototype.addAttestations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.eth.Attestation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearAttestationsList = function() {
  return this.setAttestationsList([]);
};


/**
 * repeated Deposit deposits = 7;
 * @return {!Array<!proto.eth.Deposit>}
 */
proto.eth.BeaconBlockBody.prototype.getDepositsList = function() {
  return /** @type{!Array<!proto.eth.Deposit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.Deposit, 7));
};


/**
 * @param {!Array<!proto.eth.Deposit>} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setDepositsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.eth.Deposit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.Deposit}
 */
proto.eth.BeaconBlockBody.prototype.addDeposits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.eth.Deposit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearDepositsList = function() {
  return this.setDepositsList([]);
};


/**
 * repeated SignedVoluntaryExit voluntary_exits = 8;
 * @return {!Array<!proto.eth.SignedVoluntaryExit>}
 */
proto.eth.BeaconBlockBody.prototype.getVoluntaryExitsList = function() {
  return /** @type{!Array<!proto.eth.SignedVoluntaryExit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.SignedVoluntaryExit, 8));
};


/**
 * @param {!Array<!proto.eth.SignedVoluntaryExit>} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setVoluntaryExitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.eth.SignedVoluntaryExit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.SignedVoluntaryExit}
 */
proto.eth.BeaconBlockBody.prototype.addVoluntaryExits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.eth.SignedVoluntaryExit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearVoluntaryExitsList = function() {
  return this.setVoluntaryExitsList([]);
};


/**
 * optional SyncAggregate sync_aggregate = 9;
 * @return {?proto.eth.SyncAggregate}
 */
proto.eth.BeaconBlockBody.prototype.getSyncAggregate = function() {
  return /** @type{?proto.eth.SyncAggregate} */ (
    jspb.Message.getWrapperField(this, proto.eth.SyncAggregate, 9));
};


/**
 * @param {?proto.eth.SyncAggregate|undefined} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setSyncAggregate = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearSyncAggregate = function() {
  return this.setSyncAggregate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.BeaconBlockBody.prototype.hasSyncAggregate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ExecutionPayload execution_payload = 10;
 * @return {?proto.eth.ExecutionPayload}
 */
proto.eth.BeaconBlockBody.prototype.getExecutionPayload = function() {
  return /** @type{?proto.eth.ExecutionPayload} */ (
    jspb.Message.getWrapperField(this, proto.eth.ExecutionPayload, 10));
};


/**
 * @param {?proto.eth.ExecutionPayload|undefined} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setExecutionPayload = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearExecutionPayload = function() {
  return this.setExecutionPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.BeaconBlockBody.prototype.hasExecutionPayload = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated SignedBLSToExecutionChange bls_to_execution_changes = 11;
 * @return {!Array<!proto.eth.SignedBLSToExecutionChange>}
 */
proto.eth.BeaconBlockBody.prototype.getBlsToExecutionChangesList = function() {
  return /** @type{!Array<!proto.eth.SignedBLSToExecutionChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.SignedBLSToExecutionChange, 11));
};


/**
 * @param {!Array<!proto.eth.SignedBLSToExecutionChange>} value
 * @return {!proto.eth.BeaconBlockBody} returns this
*/
proto.eth.BeaconBlockBody.prototype.setBlsToExecutionChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.eth.SignedBLSToExecutionChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.SignedBLSToExecutionChange}
 */
proto.eth.BeaconBlockBody.prototype.addBlsToExecutionChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.eth.SignedBLSToExecutionChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.BeaconBlockBody} returns this
 */
proto.eth.BeaconBlockBody.prototype.clearBlsToExecutionChangesList = function() {
  return this.setBlsToExecutionChangesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.CompactBeaconBlockBody.repeatedFields_ = [4,5,6,7,8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.CompactBeaconBlockBody.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.CompactBeaconBlockBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.CompactBeaconBlockBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.CompactBeaconBlockBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    randaoReveal: msg.getRandaoReveal_asB64(),
    eth1Data: (f = msg.getEth1Data()) && proto.eth.Eth1Data.toObject(includeInstance, f),
    graffiti: msg.getGraffiti_asB64(),
    proposerSlashingsList: jspb.Message.toObjectList(msg.getProposerSlashingsList(),
    proto.eth.ProposerSlashing.toObject, includeInstance),
    attesterSlashingsList: jspb.Message.toObjectList(msg.getAttesterSlashingsList(),
    proto.eth.AttesterSlashing.toObject, includeInstance),
    attestationsList: jspb.Message.toObjectList(msg.getAttestationsList(),
    proto.eth.Attestation.toObject, includeInstance),
    depositsList: jspb.Message.toObjectList(msg.getDepositsList(),
    proto.eth.Deposit.toObject, includeInstance),
    voluntaryExitsList: jspb.Message.toObjectList(msg.getVoluntaryExitsList(),
    proto.eth.SignedVoluntaryExit.toObject, includeInstance),
    syncAggregate: (f = msg.getSyncAggregate()) && proto.eth.SyncAggregate.toObject(includeInstance, f),
    blsToExecutionChangesList: jspb.Message.toObjectList(msg.getBlsToExecutionChangesList(),
    proto.eth.SignedBLSToExecutionChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.CompactBeaconBlockBody}
 */
proto.eth.CompactBeaconBlockBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.CompactBeaconBlockBody;
  return proto.eth.CompactBeaconBlockBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.CompactBeaconBlockBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.CompactBeaconBlockBody}
 */
proto.eth.CompactBeaconBlockBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandaoReveal(value);
      break;
    case 2:
      var value = new proto.eth.Eth1Data;
      reader.readMessage(value,proto.eth.Eth1Data.deserializeBinaryFromReader);
      msg.setEth1Data(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGraffiti(value);
      break;
    case 4:
      var value = new proto.eth.ProposerSlashing;
      reader.readMessage(value,proto.eth.ProposerSlashing.deserializeBinaryFromReader);
      msg.addProposerSlashings(value);
      break;
    case 5:
      var value = new proto.eth.AttesterSlashing;
      reader.readMessage(value,proto.eth.AttesterSlashing.deserializeBinaryFromReader);
      msg.addAttesterSlashings(value);
      break;
    case 6:
      var value = new proto.eth.Attestation;
      reader.readMessage(value,proto.eth.Attestation.deserializeBinaryFromReader);
      msg.addAttestations(value);
      break;
    case 7:
      var value = new proto.eth.Deposit;
      reader.readMessage(value,proto.eth.Deposit.deserializeBinaryFromReader);
      msg.addDeposits(value);
      break;
    case 8:
      var value = new proto.eth.SignedVoluntaryExit;
      reader.readMessage(value,proto.eth.SignedVoluntaryExit.deserializeBinaryFromReader);
      msg.addVoluntaryExits(value);
      break;
    case 9:
      var value = new proto.eth.SyncAggregate;
      reader.readMessage(value,proto.eth.SyncAggregate.deserializeBinaryFromReader);
      msg.setSyncAggregate(value);
      break;
    case 10:
      var value = new proto.eth.SignedBLSToExecutionChange;
      reader.readMessage(value,proto.eth.SignedBLSToExecutionChange.deserializeBinaryFromReader);
      msg.addBlsToExecutionChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.CompactBeaconBlockBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.CompactBeaconBlockBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.CompactBeaconBlockBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.CompactBeaconBlockBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandaoReveal_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEth1Data();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.Eth1Data.serializeBinaryToWriter
    );
  }
  f = message.getGraffiti_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProposerSlashingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.eth.ProposerSlashing.serializeBinaryToWriter
    );
  }
  f = message.getAttesterSlashingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.eth.AttesterSlashing.serializeBinaryToWriter
    );
  }
  f = message.getAttestationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.eth.Attestation.serializeBinaryToWriter
    );
  }
  f = message.getDepositsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.eth.Deposit.serializeBinaryToWriter
    );
  }
  f = message.getVoluntaryExitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.eth.SignedVoluntaryExit.serializeBinaryToWriter
    );
  }
  f = message.getSyncAggregate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.eth.SyncAggregate.serializeBinaryToWriter
    );
  }
  f = message.getBlsToExecutionChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.eth.SignedBLSToExecutionChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes randao_reveal = 1;
 * @return {string}
 */
proto.eth.CompactBeaconBlockBody.prototype.getRandaoReveal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes randao_reveal = 1;
 * This is a type-conversion wrapper around `getRandaoReveal()`
 * @return {string}
 */
proto.eth.CompactBeaconBlockBody.prototype.getRandaoReveal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandaoReveal()));
};


/**
 * optional bytes randao_reveal = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandaoReveal()`
 * @return {!Uint8Array}
 */
proto.eth.CompactBeaconBlockBody.prototype.getRandaoReveal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandaoReveal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.setRandaoReveal = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Eth1Data eth1_data = 2;
 * @return {?proto.eth.Eth1Data}
 */
proto.eth.CompactBeaconBlockBody.prototype.getEth1Data = function() {
  return /** @type{?proto.eth.Eth1Data} */ (
    jspb.Message.getWrapperField(this, proto.eth.Eth1Data, 2));
};


/**
 * @param {?proto.eth.Eth1Data|undefined} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setEth1Data = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearEth1Data = function() {
  return this.setEth1Data(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.CompactBeaconBlockBody.prototype.hasEth1Data = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes graffiti = 3;
 * @return {string}
 */
proto.eth.CompactBeaconBlockBody.prototype.getGraffiti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes graffiti = 3;
 * This is a type-conversion wrapper around `getGraffiti()`
 * @return {string}
 */
proto.eth.CompactBeaconBlockBody.prototype.getGraffiti_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGraffiti()));
};


/**
 * optional bytes graffiti = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGraffiti()`
 * @return {!Uint8Array}
 */
proto.eth.CompactBeaconBlockBody.prototype.getGraffiti_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGraffiti()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.setGraffiti = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated ProposerSlashing proposer_slashings = 4;
 * @return {!Array<!proto.eth.ProposerSlashing>}
 */
proto.eth.CompactBeaconBlockBody.prototype.getProposerSlashingsList = function() {
  return /** @type{!Array<!proto.eth.ProposerSlashing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.ProposerSlashing, 4));
};


/**
 * @param {!Array<!proto.eth.ProposerSlashing>} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setProposerSlashingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.eth.ProposerSlashing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.ProposerSlashing}
 */
proto.eth.CompactBeaconBlockBody.prototype.addProposerSlashings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.eth.ProposerSlashing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearProposerSlashingsList = function() {
  return this.setProposerSlashingsList([]);
};


/**
 * repeated AttesterSlashing attester_slashings = 5;
 * @return {!Array<!proto.eth.AttesterSlashing>}
 */
proto.eth.CompactBeaconBlockBody.prototype.getAttesterSlashingsList = function() {
  return /** @type{!Array<!proto.eth.AttesterSlashing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.AttesterSlashing, 5));
};


/**
 * @param {!Array<!proto.eth.AttesterSlashing>} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setAttesterSlashingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.eth.AttesterSlashing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.AttesterSlashing}
 */
proto.eth.CompactBeaconBlockBody.prototype.addAttesterSlashings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.eth.AttesterSlashing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearAttesterSlashingsList = function() {
  return this.setAttesterSlashingsList([]);
};


/**
 * repeated Attestation attestations = 6;
 * @return {!Array<!proto.eth.Attestation>}
 */
proto.eth.CompactBeaconBlockBody.prototype.getAttestationsList = function() {
  return /** @type{!Array<!proto.eth.Attestation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.Attestation, 6));
};


/**
 * @param {!Array<!proto.eth.Attestation>} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setAttestationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.eth.Attestation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.Attestation}
 */
proto.eth.CompactBeaconBlockBody.prototype.addAttestations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.eth.Attestation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearAttestationsList = function() {
  return this.setAttestationsList([]);
};


/**
 * repeated Deposit deposits = 7;
 * @return {!Array<!proto.eth.Deposit>}
 */
proto.eth.CompactBeaconBlockBody.prototype.getDepositsList = function() {
  return /** @type{!Array<!proto.eth.Deposit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.Deposit, 7));
};


/**
 * @param {!Array<!proto.eth.Deposit>} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setDepositsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.eth.Deposit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.Deposit}
 */
proto.eth.CompactBeaconBlockBody.prototype.addDeposits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.eth.Deposit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearDepositsList = function() {
  return this.setDepositsList([]);
};


/**
 * repeated SignedVoluntaryExit voluntary_exits = 8;
 * @return {!Array<!proto.eth.SignedVoluntaryExit>}
 */
proto.eth.CompactBeaconBlockBody.prototype.getVoluntaryExitsList = function() {
  return /** @type{!Array<!proto.eth.SignedVoluntaryExit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.SignedVoluntaryExit, 8));
};


/**
 * @param {!Array<!proto.eth.SignedVoluntaryExit>} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setVoluntaryExitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.eth.SignedVoluntaryExit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.SignedVoluntaryExit}
 */
proto.eth.CompactBeaconBlockBody.prototype.addVoluntaryExits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.eth.SignedVoluntaryExit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearVoluntaryExitsList = function() {
  return this.setVoluntaryExitsList([]);
};


/**
 * optional SyncAggregate sync_aggregate = 9;
 * @return {?proto.eth.SyncAggregate}
 */
proto.eth.CompactBeaconBlockBody.prototype.getSyncAggregate = function() {
  return /** @type{?proto.eth.SyncAggregate} */ (
    jspb.Message.getWrapperField(this, proto.eth.SyncAggregate, 9));
};


/**
 * @param {?proto.eth.SyncAggregate|undefined} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setSyncAggregate = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearSyncAggregate = function() {
  return this.setSyncAggregate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.CompactBeaconBlockBody.prototype.hasSyncAggregate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated SignedBLSToExecutionChange bls_to_execution_changes = 10;
 * @return {!Array<!proto.eth.SignedBLSToExecutionChange>}
 */
proto.eth.CompactBeaconBlockBody.prototype.getBlsToExecutionChangesList = function() {
  return /** @type{!Array<!proto.eth.SignedBLSToExecutionChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eth.SignedBLSToExecutionChange, 10));
};


/**
 * @param {!Array<!proto.eth.SignedBLSToExecutionChange>} value
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
*/
proto.eth.CompactBeaconBlockBody.prototype.setBlsToExecutionChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.eth.SignedBLSToExecutionChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.SignedBLSToExecutionChange}
 */
proto.eth.CompactBeaconBlockBody.prototype.addBlsToExecutionChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.eth.SignedBLSToExecutionChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.CompactBeaconBlockBody} returns this
 */
proto.eth.CompactBeaconBlockBody.prototype.clearBlsToExecutionChangesList = function() {
  return this.setBlsToExecutionChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.SignedBeaconBlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.SignedBeaconBlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.SignedBeaconBlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedBeaconBlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.eth.BeaconBlockHeader.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.SignedBeaconBlockHeader}
 */
proto.eth.SignedBeaconBlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.SignedBeaconBlockHeader;
  return proto.eth.SignedBeaconBlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.SignedBeaconBlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.SignedBeaconBlockHeader}
 */
proto.eth.SignedBeaconBlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.BeaconBlockHeader;
      reader.readMessage(value,proto.eth.BeaconBlockHeader.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.SignedBeaconBlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.SignedBeaconBlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.SignedBeaconBlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedBeaconBlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.BeaconBlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional BeaconBlockHeader message = 1;
 * @return {?proto.eth.BeaconBlockHeader}
 */
proto.eth.SignedBeaconBlockHeader.prototype.getMessage = function() {
  return /** @type{?proto.eth.BeaconBlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.eth.BeaconBlockHeader, 1));
};


/**
 * @param {?proto.eth.BeaconBlockHeader|undefined} value
 * @return {!proto.eth.SignedBeaconBlockHeader} returns this
*/
proto.eth.SignedBeaconBlockHeader.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.SignedBeaconBlockHeader} returns this
 */
proto.eth.SignedBeaconBlockHeader.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.SignedBeaconBlockHeader.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.eth.SignedBeaconBlockHeader.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.SignedBeaconBlockHeader.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.SignedBeaconBlockHeader.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.SignedBeaconBlockHeader} returns this
 */
proto.eth.SignedBeaconBlockHeader.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.BeaconBlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.BeaconBlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.BeaconBlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BeaconBlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    proposerIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parentRoot: msg.getParentRoot_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    bodyRoot: msg.getBodyRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.BeaconBlockHeader}
 */
proto.eth.BeaconBlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.BeaconBlockHeader;
  return proto.eth.BeaconBlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.BeaconBlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.BeaconBlockHeader}
 */
proto.eth.BeaconBlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProposerIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.BeaconBlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.BeaconBlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BeaconBlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProposerIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getParentRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getBodyRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.eth.BeaconBlockHeader.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.BeaconBlockHeader} returns this
 */
proto.eth.BeaconBlockHeader.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 proposer_index = 2;
 * @return {number}
 */
proto.eth.BeaconBlockHeader.prototype.getProposerIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.BeaconBlockHeader} returns this
 */
proto.eth.BeaconBlockHeader.prototype.setProposerIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes parent_root = 3;
 * @return {string}
 */
proto.eth.BeaconBlockHeader.prototype.getParentRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes parent_root = 3;
 * This is a type-conversion wrapper around `getParentRoot()`
 * @return {string}
 */
proto.eth.BeaconBlockHeader.prototype.getParentRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentRoot()));
};


/**
 * optional bytes parent_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentRoot()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockHeader.prototype.getParentRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlockHeader} returns this
 */
proto.eth.BeaconBlockHeader.prototype.setParentRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes state_root = 4;
 * @return {string}
 */
proto.eth.BeaconBlockHeader.prototype.getStateRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes state_root = 4;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.eth.BeaconBlockHeader.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockHeader.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlockHeader} returns this
 */
proto.eth.BeaconBlockHeader.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes body_root = 5;
 * @return {string}
 */
proto.eth.BeaconBlockHeader.prototype.getBodyRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes body_root = 5;
 * This is a type-conversion wrapper around `getBodyRoot()`
 * @return {string}
 */
proto.eth.BeaconBlockHeader.prototype.getBodyRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyRoot()));
};


/**
 * optional bytes body_root = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyRoot()`
 * @return {!Uint8Array}
 */
proto.eth.BeaconBlockHeader.prototype.getBodyRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BeaconBlockHeader} returns this
 */
proto.eth.BeaconBlockHeader.prototype.setBodyRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.Eth1Data.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.Eth1Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.Eth1Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Eth1Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    depositRoot: msg.getDepositRoot_asB64(),
    depositCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockHash: msg.getBlockHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.Eth1Data}
 */
proto.eth.Eth1Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.Eth1Data;
  return proto.eth.Eth1Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.Eth1Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.Eth1Data}
 */
proto.eth.Eth1Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDepositRoot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositCount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.Eth1Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.Eth1Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.Eth1Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Eth1Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepositRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDepositCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes deposit_root = 1;
 * @return {string}
 */
proto.eth.Eth1Data.prototype.getDepositRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deposit_root = 1;
 * This is a type-conversion wrapper around `getDepositRoot()`
 * @return {string}
 */
proto.eth.Eth1Data.prototype.getDepositRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDepositRoot()));
};


/**
 * optional bytes deposit_root = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDepositRoot()`
 * @return {!Uint8Array}
 */
proto.eth.Eth1Data.prototype.getDepositRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDepositRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Eth1Data} returns this
 */
proto.eth.Eth1Data.prototype.setDepositRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 deposit_count = 2;
 * @return {number}
 */
proto.eth.Eth1Data.prototype.getDepositCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Eth1Data} returns this
 */
proto.eth.Eth1Data.prototype.setDepositCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {string}
 */
proto.eth.Eth1Data.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.eth.Eth1Data.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.eth.Eth1Data.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Eth1Data} returns this
 */
proto.eth.Eth1Data.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.SignedVoluntaryExit.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.SignedVoluntaryExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.SignedVoluntaryExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedVoluntaryExit.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.eth.VoluntaryExit.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.SignedVoluntaryExit}
 */
proto.eth.SignedVoluntaryExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.SignedVoluntaryExit;
  return proto.eth.SignedVoluntaryExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.SignedVoluntaryExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.SignedVoluntaryExit}
 */
proto.eth.SignedVoluntaryExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.VoluntaryExit;
      reader.readMessage(value,proto.eth.VoluntaryExit.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.SignedVoluntaryExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.SignedVoluntaryExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.SignedVoluntaryExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedVoluntaryExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.VoluntaryExit.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional VoluntaryExit message = 1;
 * @return {?proto.eth.VoluntaryExit}
 */
proto.eth.SignedVoluntaryExit.prototype.getMessage = function() {
  return /** @type{?proto.eth.VoluntaryExit} */ (
    jspb.Message.getWrapperField(this, proto.eth.VoluntaryExit, 1));
};


/**
 * @param {?proto.eth.VoluntaryExit|undefined} value
 * @return {!proto.eth.SignedVoluntaryExit} returns this
*/
proto.eth.SignedVoluntaryExit.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.SignedVoluntaryExit} returns this
 */
proto.eth.SignedVoluntaryExit.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.SignedVoluntaryExit.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.eth.SignedVoluntaryExit.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.SignedVoluntaryExit.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.SignedVoluntaryExit.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.SignedVoluntaryExit} returns this
 */
proto.eth.SignedVoluntaryExit.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.VoluntaryExit.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.VoluntaryExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.VoluntaryExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.VoluntaryExit.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    validatorIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.VoluntaryExit}
 */
proto.eth.VoluntaryExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.VoluntaryExit;
  return proto.eth.VoluntaryExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.VoluntaryExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.VoluntaryExit}
 */
proto.eth.VoluntaryExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.VoluntaryExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.VoluntaryExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.VoluntaryExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.VoluntaryExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getValidatorIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.eth.VoluntaryExit.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.VoluntaryExit} returns this
 */
proto.eth.VoluntaryExit.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 validator_index = 2;
 * @return {number}
 */
proto.eth.VoluntaryExit.prototype.getValidatorIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.VoluntaryExit} returns this
 */
proto.eth.VoluntaryExit.prototype.setValidatorIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.ProposerSlashing.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.ProposerSlashing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.ProposerSlashing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.ProposerSlashing.toObject = function(includeInstance, msg) {
  var f, obj = {
    header1: (f = msg.getHeader1()) && proto.eth.SignedBeaconBlockHeader.toObject(includeInstance, f),
    header2: (f = msg.getHeader2()) && proto.eth.SignedBeaconBlockHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.ProposerSlashing}
 */
proto.eth.ProposerSlashing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.ProposerSlashing;
  return proto.eth.ProposerSlashing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.ProposerSlashing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.ProposerSlashing}
 */
proto.eth.ProposerSlashing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.SignedBeaconBlockHeader;
      reader.readMessage(value,proto.eth.SignedBeaconBlockHeader.deserializeBinaryFromReader);
      msg.setHeader1(value);
      break;
    case 2:
      var value = new proto.eth.SignedBeaconBlockHeader;
      reader.readMessage(value,proto.eth.SignedBeaconBlockHeader.deserializeBinaryFromReader);
      msg.setHeader2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.ProposerSlashing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.ProposerSlashing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.ProposerSlashing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.ProposerSlashing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.SignedBeaconBlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getHeader2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.SignedBeaconBlockHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedBeaconBlockHeader header_1 = 1;
 * @return {?proto.eth.SignedBeaconBlockHeader}
 */
proto.eth.ProposerSlashing.prototype.getHeader1 = function() {
  return /** @type{?proto.eth.SignedBeaconBlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.eth.SignedBeaconBlockHeader, 1));
};


/**
 * @param {?proto.eth.SignedBeaconBlockHeader|undefined} value
 * @return {!proto.eth.ProposerSlashing} returns this
*/
proto.eth.ProposerSlashing.prototype.setHeader1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.ProposerSlashing} returns this
 */
proto.eth.ProposerSlashing.prototype.clearHeader1 = function() {
  return this.setHeader1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.ProposerSlashing.prototype.hasHeader1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignedBeaconBlockHeader header_2 = 2;
 * @return {?proto.eth.SignedBeaconBlockHeader}
 */
proto.eth.ProposerSlashing.prototype.getHeader2 = function() {
  return /** @type{?proto.eth.SignedBeaconBlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.eth.SignedBeaconBlockHeader, 2));
};


/**
 * @param {?proto.eth.SignedBeaconBlockHeader|undefined} value
 * @return {!proto.eth.ProposerSlashing} returns this
*/
proto.eth.ProposerSlashing.prototype.setHeader2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.ProposerSlashing} returns this
 */
proto.eth.ProposerSlashing.prototype.clearHeader2 = function() {
  return this.setHeader2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.ProposerSlashing.prototype.hasHeader2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.AttesterSlashing.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.AttesterSlashing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.AttesterSlashing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.AttesterSlashing.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestation1: (f = msg.getAttestation1()) && proto.eth.IndexedAttestation.toObject(includeInstance, f),
    attestation2: (f = msg.getAttestation2()) && proto.eth.IndexedAttestation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.AttesterSlashing}
 */
proto.eth.AttesterSlashing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.AttesterSlashing;
  return proto.eth.AttesterSlashing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.AttesterSlashing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.AttesterSlashing}
 */
proto.eth.AttesterSlashing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.IndexedAttestation;
      reader.readMessage(value,proto.eth.IndexedAttestation.deserializeBinaryFromReader);
      msg.setAttestation1(value);
      break;
    case 2:
      var value = new proto.eth.IndexedAttestation;
      reader.readMessage(value,proto.eth.IndexedAttestation.deserializeBinaryFromReader);
      msg.setAttestation2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.AttesterSlashing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.AttesterSlashing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.AttesterSlashing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.AttesterSlashing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestation1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.IndexedAttestation.serializeBinaryToWriter
    );
  }
  f = message.getAttestation2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.IndexedAttestation.serializeBinaryToWriter
    );
  }
};


/**
 * optional IndexedAttestation attestation_1 = 1;
 * @return {?proto.eth.IndexedAttestation}
 */
proto.eth.AttesterSlashing.prototype.getAttestation1 = function() {
  return /** @type{?proto.eth.IndexedAttestation} */ (
    jspb.Message.getWrapperField(this, proto.eth.IndexedAttestation, 1));
};


/**
 * @param {?proto.eth.IndexedAttestation|undefined} value
 * @return {!proto.eth.AttesterSlashing} returns this
*/
proto.eth.AttesterSlashing.prototype.setAttestation1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.AttesterSlashing} returns this
 */
proto.eth.AttesterSlashing.prototype.clearAttestation1 = function() {
  return this.setAttestation1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.AttesterSlashing.prototype.hasAttestation1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IndexedAttestation attestation_2 = 2;
 * @return {?proto.eth.IndexedAttestation}
 */
proto.eth.AttesterSlashing.prototype.getAttestation2 = function() {
  return /** @type{?proto.eth.IndexedAttestation} */ (
    jspb.Message.getWrapperField(this, proto.eth.IndexedAttestation, 2));
};


/**
 * @param {?proto.eth.IndexedAttestation|undefined} value
 * @return {!proto.eth.AttesterSlashing} returns this
*/
proto.eth.AttesterSlashing.prototype.setAttestation2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.AttesterSlashing} returns this
 */
proto.eth.AttesterSlashing.prototype.clearAttestation2 = function() {
  return this.setAttestation2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.AttesterSlashing.prototype.hasAttestation2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.IndexedAttestation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.IndexedAttestation.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.IndexedAttestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.IndexedAttestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.IndexedAttestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestingIndicesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    data: (f = msg.getData()) && proto.eth.AttestationData.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.IndexedAttestation}
 */
proto.eth.IndexedAttestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.IndexedAttestation;
  return proto.eth.IndexedAttestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.IndexedAttestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.IndexedAttestation}
 */
proto.eth.IndexedAttestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAttestingIndices(values[i]);
      }
      break;
    case 2:
      var value = new proto.eth.AttestationData;
      reader.readMessage(value,proto.eth.AttestationData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.IndexedAttestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.IndexedAttestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.IndexedAttestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.IndexedAttestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestingIndicesList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.AttestationData.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated uint64 attesting_indices = 1;
 * @return {!Array<number>}
 */
proto.eth.IndexedAttestation.prototype.getAttestingIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.eth.IndexedAttestation} returns this
 */
proto.eth.IndexedAttestation.prototype.setAttestingIndicesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.eth.IndexedAttestation} returns this
 */
proto.eth.IndexedAttestation.prototype.addAttestingIndices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.IndexedAttestation} returns this
 */
proto.eth.IndexedAttestation.prototype.clearAttestingIndicesList = function() {
  return this.setAttestingIndicesList([]);
};


/**
 * optional AttestationData data = 2;
 * @return {?proto.eth.AttestationData}
 */
proto.eth.IndexedAttestation.prototype.getData = function() {
  return /** @type{?proto.eth.AttestationData} */ (
    jspb.Message.getWrapperField(this, proto.eth.AttestationData, 2));
};


/**
 * @param {?proto.eth.AttestationData|undefined} value
 * @return {!proto.eth.IndexedAttestation} returns this
*/
proto.eth.IndexedAttestation.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.IndexedAttestation} returns this
 */
proto.eth.IndexedAttestation.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.IndexedAttestation.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes signature = 3;
 * @return {string}
 */
proto.eth.IndexedAttestation.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.IndexedAttestation.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.IndexedAttestation.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.IndexedAttestation} returns this
 */
proto.eth.IndexedAttestation.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.AttestationData.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.AttestationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.AttestationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.AttestationData.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beaconBlockRoot: msg.getBeaconBlockRoot_asB64(),
    source: (f = msg.getSource()) && proto.eth.Checkpoint.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.eth.Checkpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.AttestationData}
 */
proto.eth.AttestationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.AttestationData;
  return proto.eth.AttestationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.AttestationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.AttestationData}
 */
proto.eth.AttestationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBeaconBlockRoot(value);
      break;
    case 4:
      var value = new proto.eth.Checkpoint;
      reader.readMessage(value,proto.eth.Checkpoint.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 5:
      var value = new proto.eth.Checkpoint;
      reader.readMessage(value,proto.eth.Checkpoint.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.AttestationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.AttestationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.AttestationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.AttestationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBeaconBlockRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.eth.Checkpoint.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.eth.Checkpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.eth.AttestationData.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.AttestationData} returns this
 */
proto.eth.AttestationData.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 index = 2;
 * @return {number}
 */
proto.eth.AttestationData.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.AttestationData} returns this
 */
proto.eth.AttestationData.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes beacon_block_root = 3;
 * @return {string}
 */
proto.eth.AttestationData.prototype.getBeaconBlockRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes beacon_block_root = 3;
 * This is a type-conversion wrapper around `getBeaconBlockRoot()`
 * @return {string}
 */
proto.eth.AttestationData.prototype.getBeaconBlockRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBeaconBlockRoot()));
};


/**
 * optional bytes beacon_block_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBeaconBlockRoot()`
 * @return {!Uint8Array}
 */
proto.eth.AttestationData.prototype.getBeaconBlockRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBeaconBlockRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.AttestationData} returns this
 */
proto.eth.AttestationData.prototype.setBeaconBlockRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Checkpoint source = 4;
 * @return {?proto.eth.Checkpoint}
 */
proto.eth.AttestationData.prototype.getSource = function() {
  return /** @type{?proto.eth.Checkpoint} */ (
    jspb.Message.getWrapperField(this, proto.eth.Checkpoint, 4));
};


/**
 * @param {?proto.eth.Checkpoint|undefined} value
 * @return {!proto.eth.AttestationData} returns this
*/
proto.eth.AttestationData.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.AttestationData} returns this
 */
proto.eth.AttestationData.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.AttestationData.prototype.hasSource = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Checkpoint target = 5;
 * @return {?proto.eth.Checkpoint}
 */
proto.eth.AttestationData.prototype.getTarget = function() {
  return /** @type{?proto.eth.Checkpoint} */ (
    jspb.Message.getWrapperField(this, proto.eth.Checkpoint, 5));
};


/**
 * @param {?proto.eth.Checkpoint|undefined} value
 * @return {!proto.eth.AttestationData} returns this
*/
proto.eth.AttestationData.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.AttestationData} returns this
 */
proto.eth.AttestationData.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.AttestationData.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    root: msg.getRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.Checkpoint}
 */
proto.eth.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.Checkpoint;
  return proto.eth.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.Checkpoint}
 */
proto.eth.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.eth.Checkpoint.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.Checkpoint} returns this
 */
proto.eth.Checkpoint.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes root = 2;
 * @return {string}
 */
proto.eth.Checkpoint.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes root = 2;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.eth.Checkpoint.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.eth.Checkpoint.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Checkpoint} returns this
 */
proto.eth.Checkpoint.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.Attestation.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.Attestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.Attestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Attestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    aggregationBits: msg.getAggregationBits_asB64(),
    data: (f = msg.getData()) && proto.eth.AttestationData.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.Attestation}
 */
proto.eth.Attestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.Attestation;
  return proto.eth.Attestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.Attestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.Attestation}
 */
proto.eth.Attestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggregationBits(value);
      break;
    case 2:
      var value = new proto.eth.AttestationData;
      reader.readMessage(value,proto.eth.AttestationData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.Attestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.Attestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.Attestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Attestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAggregationBits_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.AttestationData.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes aggregation_bits = 1;
 * @return {string}
 */
proto.eth.Attestation.prototype.getAggregationBits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes aggregation_bits = 1;
 * This is a type-conversion wrapper around `getAggregationBits()`
 * @return {string}
 */
proto.eth.Attestation.prototype.getAggregationBits_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggregationBits()));
};


/**
 * optional bytes aggregation_bits = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregationBits()`
 * @return {!Uint8Array}
 */
proto.eth.Attestation.prototype.getAggregationBits_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggregationBits()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Attestation} returns this
 */
proto.eth.Attestation.prototype.setAggregationBits = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AttestationData data = 2;
 * @return {?proto.eth.AttestationData}
 */
proto.eth.Attestation.prototype.getData = function() {
  return /** @type{?proto.eth.AttestationData} */ (
    jspb.Message.getWrapperField(this, proto.eth.AttestationData, 2));
};


/**
 * @param {?proto.eth.AttestationData|undefined} value
 * @return {!proto.eth.Attestation} returns this
*/
proto.eth.Attestation.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.Attestation} returns this
 */
proto.eth.Attestation.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.Attestation.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes signature = 3;
 * @return {string}
 */
proto.eth.Attestation.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.Attestation.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.Attestation.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.Attestation} returns this
 */
proto.eth.Attestation.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eth.Deposit.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.Deposit.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.Deposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.Deposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Deposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    proofList: msg.getProofList_asB64(),
    data: (f = msg.getData()) && proto.eth.DepositData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.Deposit}
 */
proto.eth.Deposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.Deposit;
  return proto.eth.Deposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.Deposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.Deposit}
 */
proto.eth.Deposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProof(value);
      break;
    case 2:
      var value = new proto.eth.DepositData;
      reader.readMessage(value,proto.eth.DepositData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.Deposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.Deposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.Deposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.Deposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProofList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eth.DepositData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bytes proof = 1;
 * @return {!Array<string>}
 */
proto.eth.Deposit.prototype.getProofList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes proof = 1;
 * This is a type-conversion wrapper around `getProofList()`
 * @return {!Array<string>}
 */
proto.eth.Deposit.prototype.getProofList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofList()));
};


/**
 * repeated bytes proof = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofList()`
 * @return {!Array<!Uint8Array>}
 */
proto.eth.Deposit.prototype.getProofList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.eth.Deposit} returns this
 */
proto.eth.Deposit.prototype.setProofList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.eth.Deposit} returns this
 */
proto.eth.Deposit.prototype.addProof = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eth.Deposit} returns this
 */
proto.eth.Deposit.prototype.clearProofList = function() {
  return this.setProofList([]);
};


/**
 * optional DepositData data = 2;
 * @return {?proto.eth.DepositData}
 */
proto.eth.Deposit.prototype.getData = function() {
  return /** @type{?proto.eth.DepositData} */ (
    jspb.Message.getWrapperField(this, proto.eth.DepositData, 2));
};


/**
 * @param {?proto.eth.DepositData|undefined} value
 * @return {!proto.eth.Deposit} returns this
*/
proto.eth.Deposit.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.Deposit} returns this
 */
proto.eth.Deposit.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.Deposit.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.DepositData.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.DepositData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.DepositData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.DepositData.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64(),
    withdrawalCredentials: msg.getWithdrawalCredentials_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.DepositData}
 */
proto.eth.DepositData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.DepositData;
  return proto.eth.DepositData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.DepositData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.DepositData}
 */
proto.eth.DepositData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWithdrawalCredentials(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.DepositData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.DepositData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.DepositData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.DepositData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getWithdrawalCredentials_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {string}
 */
proto.eth.DepositData.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.eth.DepositData.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.eth.DepositData.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.DepositData} returns this
 */
proto.eth.DepositData.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes withdrawal_credentials = 2;
 * @return {string}
 */
proto.eth.DepositData.prototype.getWithdrawalCredentials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes withdrawal_credentials = 2;
 * This is a type-conversion wrapper around `getWithdrawalCredentials()`
 * @return {string}
 */
proto.eth.DepositData.prototype.getWithdrawalCredentials_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWithdrawalCredentials()));
};


/**
 * optional bytes withdrawal_credentials = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWithdrawalCredentials()`
 * @return {!Uint8Array}
 */
proto.eth.DepositData.prototype.getWithdrawalCredentials_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWithdrawalCredentials()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.DepositData} returns this
 */
proto.eth.DepositData.prototype.setWithdrawalCredentials = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.eth.DepositData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.DepositData} returns this
 */
proto.eth.DepositData.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {string}
 */
proto.eth.DepositData.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.DepositData.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.DepositData.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.DepositData} returns this
 */
proto.eth.DepositData.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.SyncAggregate.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.SyncAggregate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.SyncAggregate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SyncAggregate.toObject = function(includeInstance, msg) {
  var f, obj = {
    syncCommitteeBits: msg.getSyncCommitteeBits_asB64(),
    syncCommitteeSignature: msg.getSyncCommitteeSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.SyncAggregate}
 */
proto.eth.SyncAggregate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.SyncAggregate;
  return proto.eth.SyncAggregate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.SyncAggregate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.SyncAggregate}
 */
proto.eth.SyncAggregate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSyncCommitteeBits(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSyncCommitteeSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.SyncAggregate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.SyncAggregate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.SyncAggregate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SyncAggregate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSyncCommitteeBits_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSyncCommitteeSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes sync_committee_bits = 1;
 * @return {string}
 */
proto.eth.SyncAggregate.prototype.getSyncCommitteeBits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sync_committee_bits = 1;
 * This is a type-conversion wrapper around `getSyncCommitteeBits()`
 * @return {string}
 */
proto.eth.SyncAggregate.prototype.getSyncCommitteeBits_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSyncCommitteeBits()));
};


/**
 * optional bytes sync_committee_bits = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSyncCommitteeBits()`
 * @return {!Uint8Array}
 */
proto.eth.SyncAggregate.prototype.getSyncCommitteeBits_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSyncCommitteeBits()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.SyncAggregate} returns this
 */
proto.eth.SyncAggregate.prototype.setSyncCommitteeBits = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sync_committee_signature = 2;
 * @return {string}
 */
proto.eth.SyncAggregate.prototype.getSyncCommitteeSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sync_committee_signature = 2;
 * This is a type-conversion wrapper around `getSyncCommitteeSignature()`
 * @return {string}
 */
proto.eth.SyncAggregate.prototype.getSyncCommitteeSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSyncCommitteeSignature()));
};


/**
 * optional bytes sync_committee_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSyncCommitteeSignature()`
 * @return {!Uint8Array}
 */
proto.eth.SyncAggregate.prototype.getSyncCommitteeSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSyncCommitteeSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.SyncAggregate} returns this
 */
proto.eth.SyncAggregate.prototype.setSyncCommitteeSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.SignedBLSToExecutionChange.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.SignedBLSToExecutionChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.SignedBLSToExecutionChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedBLSToExecutionChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.eth.BLSToExecutionChange.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.SignedBLSToExecutionChange}
 */
proto.eth.SignedBLSToExecutionChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.SignedBLSToExecutionChange;
  return proto.eth.SignedBLSToExecutionChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.SignedBLSToExecutionChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.SignedBLSToExecutionChange}
 */
proto.eth.SignedBLSToExecutionChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eth.BLSToExecutionChange;
      reader.readMessage(value,proto.eth.BLSToExecutionChange.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.SignedBLSToExecutionChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.SignedBLSToExecutionChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.SignedBLSToExecutionChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.SignedBLSToExecutionChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.eth.BLSToExecutionChange.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional BLSToExecutionChange message = 1;
 * @return {?proto.eth.BLSToExecutionChange}
 */
proto.eth.SignedBLSToExecutionChange.prototype.getMessage = function() {
  return /** @type{?proto.eth.BLSToExecutionChange} */ (
    jspb.Message.getWrapperField(this, proto.eth.BLSToExecutionChange, 1));
};


/**
 * @param {?proto.eth.BLSToExecutionChange|undefined} value
 * @return {!proto.eth.SignedBLSToExecutionChange} returns this
*/
proto.eth.SignedBLSToExecutionChange.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eth.SignedBLSToExecutionChange} returns this
 */
proto.eth.SignedBLSToExecutionChange.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eth.SignedBLSToExecutionChange.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.eth.SignedBLSToExecutionChange.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.eth.SignedBLSToExecutionChange.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.eth.SignedBLSToExecutionChange.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.SignedBLSToExecutionChange} returns this
 */
proto.eth.SignedBLSToExecutionChange.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eth.BLSToExecutionChange.prototype.toObject = function(opt_includeInstance) {
  return proto.eth.BLSToExecutionChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eth.BLSToExecutionChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BLSToExecutionChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fromBlsPubkey: msg.getFromBlsPubkey_asB64(),
    toExecutionAddress: msg.getToExecutionAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eth.BLSToExecutionChange}
 */
proto.eth.BLSToExecutionChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eth.BLSToExecutionChange;
  return proto.eth.BLSToExecutionChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eth.BLSToExecutionChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eth.BLSToExecutionChange}
 */
proto.eth.BLSToExecutionChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromBlsPubkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToExecutionAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eth.BLSToExecutionChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eth.BLSToExecutionChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eth.BLSToExecutionChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eth.BLSToExecutionChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFromBlsPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getToExecutionAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 validator_index = 1;
 * @return {number}
 */
proto.eth.BLSToExecutionChange.prototype.getValidatorIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eth.BLSToExecutionChange} returns this
 */
proto.eth.BLSToExecutionChange.prototype.setValidatorIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes from_bls_pubkey = 2;
 * @return {string}
 */
proto.eth.BLSToExecutionChange.prototype.getFromBlsPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes from_bls_pubkey = 2;
 * This is a type-conversion wrapper around `getFromBlsPubkey()`
 * @return {string}
 */
proto.eth.BLSToExecutionChange.prototype.getFromBlsPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromBlsPubkey()));
};


/**
 * optional bytes from_bls_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromBlsPubkey()`
 * @return {!Uint8Array}
 */
proto.eth.BLSToExecutionChange.prototype.getFromBlsPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromBlsPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BLSToExecutionChange} returns this
 */
proto.eth.BLSToExecutionChange.prototype.setFromBlsPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes to_execution_address = 3;
 * @return {string}
 */
proto.eth.BLSToExecutionChange.prototype.getToExecutionAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes to_execution_address = 3;
 * This is a type-conversion wrapper around `getToExecutionAddress()`
 * @return {string}
 */
proto.eth.BLSToExecutionChange.prototype.getToExecutionAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToExecutionAddress()));
};


/**
 * optional bytes to_execution_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToExecutionAddress()`
 * @return {!Uint8Array}
 */
proto.eth.BLSToExecutionChange.prototype.getToExecutionAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToExecutionAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.eth.BLSToExecutionChange} returns this
 */
proto.eth.BLSToExecutionChange.prototype.setToExecutionAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.eth);
