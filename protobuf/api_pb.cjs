// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return Function("return this")();
}.call(null);

var eth_pb = require("./eth_pb.cjs");
goog.object.extend(proto, eth_pb);
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb.js");
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol("proto.api.BeaconBlockMsg", null, global);
goog.exportSymbol("proto.api.BlockFilter", null, global);
goog.exportSymbol("proto.api.BlockSubmissionMsg", null, global);
goog.exportSymbol("proto.api.BlockSubmissionResponse", null, global);
goog.exportSymbol("proto.api.ExecutionPayloadMsg", null, global);
goog.exportSymbol("proto.api.RawTxMsg", null, global);
goog.exportSymbol("proto.api.RawTxSequenceMsg", null, global);
goog.exportSymbol("proto.api.TransactionMsg", null, global);
goog.exportSymbol("proto.api.TransactionResponse", null, global);
goog.exportSymbol("proto.api.TransactionWithSenderMsg", null, global);
goog.exportSymbol("proto.api.TxFilter", null, global);
goog.exportSymbol("proto.api.TxSequenceMsg", null, global);
goog.exportSymbol("proto.api.TxSequenceMsgV2", null, global);
goog.exportSymbol("proto.api.TxSequenceResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TxSequenceMsg = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.api.TxSequenceMsg.repeatedFields_,
    null,
  );
};
goog.inherits(proto.api.TxSequenceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TxSequenceMsg.displayName = "proto.api.TxSequenceMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TxSequenceMsgV2 = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.api.TxSequenceMsgV2.repeatedFields_,
    null,
  );
};
goog.inherits(proto.api.TxSequenceMsgV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TxSequenceMsgV2.displayName = "proto.api.TxSequenceMsgV2";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RawTxSequenceMsg = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.api.RawTxSequenceMsg.repeatedFields_,
    null,
  );
};
goog.inherits(proto.api.RawTxSequenceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RawTxSequenceMsg.displayName = "proto.api.RawTxSequenceMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TxSequenceResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.api.TxSequenceResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.api.TxSequenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TxSequenceResponse.displayName = "proto.api.TxSequenceResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TxFilter = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TxFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TxFilter.displayName = "proto.api.TxFilter";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.BlockFilter = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.BlockFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.BlockFilter.displayName = "proto.api.BlockFilter";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RawTxMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RawTxMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RawTxMsg.displayName = "proto.api.RawTxMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.BlockSubmissionMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.BlockSubmissionMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.BlockSubmissionMsg.displayName = "proto.api.BlockSubmissionMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TransactionMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TransactionMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TransactionMsg.displayName = "proto.api.TransactionMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TransactionWithSenderMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TransactionWithSenderMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TransactionWithSenderMsg.displayName =
    "proto.api.TransactionWithSenderMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ExecutionPayloadMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ExecutionPayloadMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ExecutionPayloadMsg.displayName = "proto.api.ExecutionPayloadMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.BeaconBlockMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.BeaconBlockMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.BeaconBlockMsg.displayName = "proto.api.BeaconBlockMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.BlockSubmissionResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.BlockSubmissionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.BlockSubmissionResponse.displayName =
    "proto.api.BlockSubmissionResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TransactionResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TransactionResponse.displayName = "proto.api.TransactionResponse";
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.TxSequenceMsg.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TxSequenceMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.api.TxSequenceMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TxSequenceMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TxSequenceMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sequenceList: jspb.Message.toObjectList(
          msg.getSequenceList(),
          eth_pb.Transaction.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TxSequenceMsg}
 */
proto.api.TxSequenceMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TxSequenceMsg();
  return proto.api.TxSequenceMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TxSequenceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TxSequenceMsg}
 */
proto.api.TxSequenceMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new eth_pb.Transaction();
        reader.readMessage(
          value,
          eth_pb.Transaction.deserializeBinaryFromReader,
        );
        msg.addSequence(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TxSequenceMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TxSequenceMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TxSequenceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TxSequenceMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSequenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      eth_pb.Transaction.serializeBinaryToWriter,
    );
  }
};

/**
 * repeated eth.Transaction sequence = 1;
 * @return {!Array<!proto.eth.Transaction>}
 */
proto.api.TxSequenceMsg.prototype.getSequenceList = function () {
  return /** @type{!Array<!proto.eth.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, eth_pb.Transaction, 1)
  );
};

/**
 * @param {!Array<!proto.eth.Transaction>} value
 * @return {!proto.api.TxSequenceMsg} returns this
 */
proto.api.TxSequenceMsg.prototype.setSequenceList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.eth.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eth.Transaction}
 */
proto.api.TxSequenceMsg.prototype.addSequence = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.eth.Transaction,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.TxSequenceMsg} returns this
 */
proto.api.TxSequenceMsg.prototype.clearSequenceList = function () {
  return this.setSequenceList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.TxSequenceMsgV2.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TxSequenceMsgV2.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.TxSequenceMsgV2.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TxSequenceMsgV2} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TxSequenceMsgV2.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sequenceList: msg.getSequenceList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TxSequenceMsgV2}
 */
proto.api.TxSequenceMsgV2.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TxSequenceMsgV2();
  return proto.api.TxSequenceMsgV2.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TxSequenceMsgV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TxSequenceMsgV2}
 */
proto.api.TxSequenceMsgV2.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addSequence(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TxSequenceMsgV2.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TxSequenceMsgV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TxSequenceMsgV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TxSequenceMsgV2.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSequenceList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(1, f);
  }
};

/**
 * repeated bytes sequence = 1;
 * @return {!Array<string>}
 */
proto.api.TxSequenceMsgV2.prototype.getSequenceList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * repeated bytes sequence = 1;
 * This is a type-conversion wrapper around `getSequenceList()`
 * @return {!Array<string>}
 */
proto.api.TxSequenceMsgV2.prototype.getSequenceList_asB64 = function () {
  return /** @type {!Array<string>} */ (
    jspb.Message.bytesListAsB64(this.getSequenceList())
  );
};

/**
 * repeated bytes sequence = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSequenceList()`
 * @return {!Array<!Uint8Array>}
 */
proto.api.TxSequenceMsgV2.prototype.getSequenceList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (
    jspb.Message.bytesListAsU8(this.getSequenceList())
  );
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.api.TxSequenceMsgV2} returns this
 */
proto.api.TxSequenceMsgV2.prototype.setSequenceList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.api.TxSequenceMsgV2} returns this
 */
proto.api.TxSequenceMsgV2.prototype.addSequence = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.TxSequenceMsgV2} returns this
 */
proto.api.TxSequenceMsgV2.prototype.clearSequenceList = function () {
  return this.setSequenceList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.RawTxSequenceMsg.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.RawTxSequenceMsg.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.RawTxSequenceMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.RawTxSequenceMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.RawTxSequenceMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        rawTxsList: msg.getRawTxsList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RawTxSequenceMsg}
 */
proto.api.RawTxSequenceMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RawTxSequenceMsg();
  return proto.api.RawTxSequenceMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RawTxSequenceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RawTxSequenceMsg}
 */
proto.api.RawTxSequenceMsg.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addRawTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RawTxSequenceMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.RawTxSequenceMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RawTxSequenceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RawTxSequenceMsg.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getRawTxsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(1, f);
  }
};

/**
 * repeated bytes raw_txs = 1;
 * @return {!Array<string>}
 */
proto.api.RawTxSequenceMsg.prototype.getRawTxsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * repeated bytes raw_txs = 1;
 * This is a type-conversion wrapper around `getRawTxsList()`
 * @return {!Array<string>}
 */
proto.api.RawTxSequenceMsg.prototype.getRawTxsList_asB64 = function () {
  return /** @type {!Array<string>} */ (
    jspb.Message.bytesListAsB64(this.getRawTxsList())
  );
};

/**
 * repeated bytes raw_txs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTxsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.api.RawTxSequenceMsg.prototype.getRawTxsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (
    jspb.Message.bytesListAsU8(this.getRawTxsList())
  );
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.api.RawTxSequenceMsg} returns this
 */
proto.api.RawTxSequenceMsg.prototype.setRawTxsList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.api.RawTxSequenceMsg} returns this
 */
proto.api.RawTxSequenceMsg.prototype.addRawTxs = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.RawTxSequenceMsg} returns this
 */
proto.api.RawTxSequenceMsg.prototype.clearRawTxsList = function () {
  return this.setRawTxsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.TxSequenceResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TxSequenceResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.TxSequenceResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TxSequenceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TxSequenceResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sequenceResponseList: jspb.Message.toObjectList(
          msg.getSequenceResponseList(),
          proto.api.TransactionResponse.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TxSequenceResponse}
 */
proto.api.TxSequenceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TxSequenceResponse();
  return proto.api.TxSequenceResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TxSequenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TxSequenceResponse}
 */
proto.api.TxSequenceResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.api.TransactionResponse();
        reader.readMessage(
          value,
          proto.api.TransactionResponse.deserializeBinaryFromReader,
        );
        msg.addSequenceResponse(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TxSequenceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TxSequenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TxSequenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TxSequenceResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSequenceResponseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.TransactionResponse.serializeBinaryToWriter,
    );
  }
};

/**
 * repeated TransactionResponse sequence_response = 1;
 * @return {!Array<!proto.api.TransactionResponse>}
 */
proto.api.TxSequenceResponse.prototype.getSequenceResponseList = function () {
  return /** @type{!Array<!proto.api.TransactionResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.TransactionResponse, 1)
  );
};

/**
 * @param {!Array<!proto.api.TransactionResponse>} value
 * @return {!proto.api.TxSequenceResponse} returns this
 */
proto.api.TxSequenceResponse.prototype.setSequenceResponseList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.api.TransactionResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.TransactionResponse}
 */
proto.api.TxSequenceResponse.prototype.addSequenceResponse = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.api.TransactionResponse,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.TxSequenceResponse} returns this
 */
proto.api.TxSequenceResponse.prototype.clearSequenceResponseList = function () {
  return this.setSequenceResponseList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TxFilter.prototype.toObject = function (opt_includeInstance) {
    return proto.api.TxFilter.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TxFilter} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TxFilter.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        encoded: msg.getEncoded_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TxFilter}
 */
proto.api.TxFilter.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TxFilter();
  return proto.api.TxFilter.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TxFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TxFilter}
 */
proto.api.TxFilter.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEncoded(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TxFilter.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TxFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TxFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TxFilter.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEncoded_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes encoded = 1;
 * @return {string}
 */
proto.api.TxFilter.prototype.getEncoded = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes encoded = 1;
 * This is a type-conversion wrapper around `getEncoded()`
 * @return {string}
 */
proto.api.TxFilter.prototype.getEncoded_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncoded()));
};

/**
 * optional bytes encoded = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncoded()`
 * @return {!Uint8Array}
 */
proto.api.TxFilter.prototype.getEncoded_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncoded()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.TxFilter} returns this
 */
proto.api.TxFilter.prototype.setEncoded = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.BlockFilter.prototype.toObject = function (opt_includeInstance) {
    return proto.api.BlockFilter.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.BlockFilter} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.BlockFilter.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        producer: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.BlockFilter}
 */
proto.api.BlockFilter.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.BlockFilter();
  return proto.api.BlockFilter.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.BlockFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.BlockFilter}
 */
proto.api.BlockFilter.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setProducer(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.BlockFilter.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.BlockFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.BlockFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.BlockFilter.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getProducer();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string producer = 1;
 * @return {string}
 */
proto.api.BlockFilter.prototype.getProducer = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.api.BlockFilter} returns this
 */
proto.api.BlockFilter.prototype.setProducer = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.RawTxMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.api.RawTxMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.RawTxMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.RawTxMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        rawtx: msg.getRawtx_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RawTxMsg}
 */
proto.api.RawTxMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RawTxMsg();
  return proto.api.RawTxMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RawTxMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RawTxMsg}
 */
proto.api.RawTxMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRawtx(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RawTxMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.RawTxMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RawTxMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RawTxMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRawtx_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes rawTx = 1;
 * @return {string}
 */
proto.api.RawTxMsg.prototype.getRawtx = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes rawTx = 1;
 * This is a type-conversion wrapper around `getRawtx()`
 * @return {string}
 */
proto.api.RawTxMsg.prototype.getRawtx_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getRawtx()));
};

/**
 * optional bytes rawTx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawtx()`
 * @return {!Uint8Array}
 */
proto.api.RawTxMsg.prototype.getRawtx_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getRawtx()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.RawTxMsg} returns this
 */
proto.api.RawTxMsg.prototype.setRawtx = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.BlockSubmissionMsg.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.BlockSubmissionMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.BlockSubmissionMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.BlockSubmissionMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sszBlock: msg.getSszBlock_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.BlockSubmissionMsg}
 */
proto.api.BlockSubmissionMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.BlockSubmissionMsg();
  return proto.api.BlockSubmissionMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.BlockSubmissionMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.BlockSubmissionMsg}
 */
proto.api.BlockSubmissionMsg.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSszBlock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.BlockSubmissionMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.BlockSubmissionMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.BlockSubmissionMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.BlockSubmissionMsg.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSszBlock_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes ssz_block = 1;
 * @return {string}
 */
proto.api.BlockSubmissionMsg.prototype.getSszBlock = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes ssz_block = 1;
 * This is a type-conversion wrapper around `getSszBlock()`
 * @return {string}
 */
proto.api.BlockSubmissionMsg.prototype.getSszBlock_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSszBlock()));
};

/**
 * optional bytes ssz_block = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSszBlock()`
 * @return {!Uint8Array}
 */
proto.api.BlockSubmissionMsg.prototype.getSszBlock_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSszBlock())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.BlockSubmissionMsg} returns this
 */
proto.api.BlockSubmissionMsg.prototype.setSszBlock = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TransactionMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.api.TransactionMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TransactionMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TransactionMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        rlpTransaction: msg.getRlpTransaction_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TransactionMsg}
 */
proto.api.TransactionMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TransactionMsg();
  return proto.api.TransactionMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TransactionMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TransactionMsg}
 */
proto.api.TransactionMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRlpTransaction(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TransactionMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TransactionMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TransactionMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TransactionMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRlpTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes rlp_transaction = 1;
 * @return {string}
 */
proto.api.TransactionMsg.prototype.getRlpTransaction = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes rlp_transaction = 1;
 * This is a type-conversion wrapper around `getRlpTransaction()`
 * @return {string}
 */
proto.api.TransactionMsg.prototype.getRlpTransaction_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getRlpTransaction())
  );
};

/**
 * optional bytes rlp_transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRlpTransaction()`
 * @return {!Uint8Array}
 */
proto.api.TransactionMsg.prototype.getRlpTransaction_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getRlpTransaction())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.TransactionMsg} returns this
 */
proto.api.TransactionMsg.prototype.setRlpTransaction = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TransactionWithSenderMsg.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.TransactionWithSenderMsg.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TransactionWithSenderMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TransactionWithSenderMsg.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        rlpTransaction: msg.getRlpTransaction_asB64(),
        sender: msg.getSender_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TransactionWithSenderMsg}
 */
proto.api.TransactionWithSenderMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TransactionWithSenderMsg();
  return proto.api.TransactionWithSenderMsg.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TransactionWithSenderMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TransactionWithSenderMsg}
 */
proto.api.TransactionWithSenderMsg.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRlpTransaction(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSender(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TransactionWithSenderMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TransactionWithSenderMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TransactionWithSenderMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TransactionWithSenderMsg.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getRlpTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes rlp_transaction = 1;
 * @return {string}
 */
proto.api.TransactionWithSenderMsg.prototype.getRlpTransaction = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes rlp_transaction = 1;
 * This is a type-conversion wrapper around `getRlpTransaction()`
 * @return {string}
 */
proto.api.TransactionWithSenderMsg.prototype.getRlpTransaction_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getRlpTransaction())
    );
  };

/**
 * optional bytes rlp_transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRlpTransaction()`
 * @return {!Uint8Array}
 */
proto.api.TransactionWithSenderMsg.prototype.getRlpTransaction_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getRlpTransaction())
    );
  };

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.TransactionWithSenderMsg} returns this
 */
proto.api.TransactionWithSenderMsg.prototype.setRlpTransaction = function (
  value,
) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes sender = 2;
 * @return {string}
 */
proto.api.TransactionWithSenderMsg.prototype.getSender = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes sender = 2;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.api.TransactionWithSenderMsg.prototype.getSender_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSender()));
};

/**
 * optional bytes sender = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.api.TransactionWithSenderMsg.prototype.getSender_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSender()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.TransactionWithSenderMsg} returns this
 */
proto.api.TransactionWithSenderMsg.prototype.setSender = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.ExecutionPayloadMsg.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.ExecutionPayloadMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.ExecutionPayloadMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.ExecutionPayloadMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        dataVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
        sszPayload: msg.getSszPayload_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ExecutionPayloadMsg}
 */
proto.api.ExecutionPayloadMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ExecutionPayloadMsg();
  return proto.api.ExecutionPayloadMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ExecutionPayloadMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ExecutionPayloadMsg}
 */
proto.api.ExecutionPayloadMsg.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDataVersion(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSszPayload(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ExecutionPayloadMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.ExecutionPayloadMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ExecutionPayloadMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ExecutionPayloadMsg.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getDataVersion();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getSszPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional uint32 data_version = 1;
 * @return {number}
 */
proto.api.ExecutionPayloadMsg.prototype.getDataVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.api.ExecutionPayloadMsg} returns this
 */
proto.api.ExecutionPayloadMsg.prototype.setDataVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes ssz_payload = 2;
 * @return {string}
 */
proto.api.ExecutionPayloadMsg.prototype.getSszPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes ssz_payload = 2;
 * This is a type-conversion wrapper around `getSszPayload()`
 * @return {string}
 */
proto.api.ExecutionPayloadMsg.prototype.getSszPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSszPayload()));
};

/**
 * optional bytes ssz_payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSszPayload()`
 * @return {!Uint8Array}
 */
proto.api.ExecutionPayloadMsg.prototype.getSszPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSszPayload())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.ExecutionPayloadMsg} returns this
 */
proto.api.ExecutionPayloadMsg.prototype.setSszPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.BeaconBlockMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.api.BeaconBlockMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.BeaconBlockMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.BeaconBlockMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        dataVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
        sszBlock: msg.getSszBlock_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.BeaconBlockMsg}
 */
proto.api.BeaconBlockMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.BeaconBlockMsg();
  return proto.api.BeaconBlockMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.BeaconBlockMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.BeaconBlockMsg}
 */
proto.api.BeaconBlockMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDataVersion(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSszBlock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.BeaconBlockMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.BeaconBlockMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.BeaconBlockMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.BeaconBlockMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDataVersion();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getSszBlock_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional uint32 data_version = 1;
 * @return {number}
 */
proto.api.BeaconBlockMsg.prototype.getDataVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.api.BeaconBlockMsg} returns this
 */
proto.api.BeaconBlockMsg.prototype.setDataVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes ssz_block = 2;
 * @return {string}
 */
proto.api.BeaconBlockMsg.prototype.getSszBlock = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes ssz_block = 2;
 * This is a type-conversion wrapper around `getSszBlock()`
 * @return {string}
 */
proto.api.BeaconBlockMsg.prototype.getSszBlock_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSszBlock()));
};

/**
 * optional bytes ssz_block = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSszBlock()`
 * @return {!Uint8Array}
 */
proto.api.BeaconBlockMsg.prototype.getSszBlock_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getSszBlock())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.BeaconBlockMsg} returns this
 */
proto.api.BeaconBlockMsg.prototype.setSszBlock = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.BlockSubmissionResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.BlockSubmissionResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.BlockSubmissionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.BlockSubmissionResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
        stateRoot: msg.getStateRoot_asB64(),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.BlockSubmissionResponse}
 */
proto.api.BlockSubmissionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.BlockSubmissionResponse();
  return proto.api.BlockSubmissionResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.BlockSubmissionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.BlockSubmissionResponse}
 */
proto.api.BlockSubmissionResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setSlot(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setStateRoot(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.BlockSubmissionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.BlockSubmissionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.BlockSubmissionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.BlockSubmissionResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
};

/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.api.BlockSubmissionResponse.prototype.getSlot = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.api.BlockSubmissionResponse} returns this
 */
proto.api.BlockSubmissionResponse.prototype.setSlot = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes state_root = 2;
 * @return {string}
 */
proto.api.BlockSubmissionResponse.prototype.getStateRoot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes state_root = 2;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.api.BlockSubmissionResponse.prototype.getStateRoot_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getStateRoot()));
};

/**
 * optional bytes state_root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.api.BlockSubmissionResponse.prototype.getStateRoot_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getStateRoot())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.BlockSubmissionResponse} returns this
 */
proto.api.BlockSubmissionResponse.prototype.setStateRoot = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.api.BlockSubmissionResponse.prototype.getTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.api.BlockSubmissionResponse} returns this
 */
proto.api.BlockSubmissionResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.api.TransactionResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.api.TransactionResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.api.TransactionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.api.TransactionResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
        timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TransactionResponse}
 */
proto.api.TransactionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TransactionResponse();
  return proto.api.TransactionResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TransactionResponse}
 */
proto.api.TransactionResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TransactionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.api.TransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TransactionResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.api.TransactionResponse.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.api.TransactionResponse} returns this
 */
proto.api.TransactionResponse.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.api.TransactionResponse.prototype.getTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.api.TransactionResponse} returns this
 */
proto.api.TransactionResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

goog.object.extend(exports, proto.api);
