// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.types.ExecutionPayload', null, global);
goog.exportSymbol('proto.types.H1024', null, global);
goog.exportSymbol('proto.types.H128', null, global);
goog.exportSymbol('proto.types.H160', null, global);
goog.exportSymbol('proto.types.H2048', null, global);
goog.exportSymbol('proto.types.H256', null, global);
goog.exportSymbol('proto.types.H512', null, global);
goog.exportSymbol('proto.types.NodeInfoPorts', null, global);
goog.exportSymbol('proto.types.NodeInfoReply', null, global);
goog.exportSymbol('proto.types.PeerInfo', null, global);
goog.exportSymbol('proto.types.VersionReply', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H128 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H128, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H128.displayName = 'proto.types.H128';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H160 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H160, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H160.displayName = 'proto.types.H160';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H256 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H256, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H256.displayName = 'proto.types.H256';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H512 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H512, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H512.displayName = 'proto.types.H512';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H1024 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H1024, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H1024.displayName = 'proto.types.H1024';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.H2048 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.H2048, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.H2048.displayName = 'proto.types.H2048';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.VersionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.VersionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.VersionReply.displayName = 'proto.types.VersionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ExecutionPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.ExecutionPayload.repeatedFields_, null);
};
goog.inherits(proto.types.ExecutionPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.ExecutionPayload.displayName = 'proto.types.ExecutionPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.NodeInfoPorts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.NodeInfoPorts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.NodeInfoPorts.displayName = 'proto.types.NodeInfoPorts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.NodeInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.NodeInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.NodeInfoReply.displayName = 'proto.types.NodeInfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.PeerInfo.repeatedFields_, null);
};
goog.inherits(proto.types.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PeerInfo.displayName = 'proto.types.PeerInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H128.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H128.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H128} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H128.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lo: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H128}
 */
proto.types.H128.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H128;
  return proto.types.H128.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H128} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H128}
 */
proto.types.H128.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H128.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H128.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H128} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H128.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLo();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 hi = 1;
 * @return {number}
 */
proto.types.H128.prototype.getHi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.H128} returns this
 */
proto.types.H128.prototype.setHi = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 lo = 2;
 * @return {number}
 */
proto.types.H128.prototype.getLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.H128} returns this
 */
proto.types.H128.prototype.setLo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H160.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H160.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H160} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H160.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H128.toObject(includeInstance, f),
    lo: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H160}
 */
proto.types.H160.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H160;
  return proto.types.H160.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H160} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H160}
 */
proto.types.H160.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H128;
      reader.readMessage(value,proto.types.H128.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H160.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H160.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H160} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H160.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H128.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional H128 hi = 1;
 * @return {?proto.types.H128}
 */
proto.types.H160.prototype.getHi = function() {
  return /** @type{?proto.types.H128} */ (
    jspb.Message.getWrapperField(this, proto.types.H128, 1));
};


/**
 * @param {?proto.types.H128|undefined} value
 * @return {!proto.types.H160} returns this
*/
proto.types.H160.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H160} returns this
 */
proto.types.H160.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H160.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 lo = 2;
 * @return {number}
 */
proto.types.H160.prototype.getLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.H160} returns this
 */
proto.types.H160.prototype.setLo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H256.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H256.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H256} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H256.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H128.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H128.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H256}
 */
proto.types.H256.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H256;
  return proto.types.H256.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H256} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H256}
 */
proto.types.H256.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H128;
      reader.readMessage(value,proto.types.H128.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H128;
      reader.readMessage(value,proto.types.H128.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H256.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H256.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H256} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H256.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H128.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H128.serializeBinaryToWriter
    );
  }
};


/**
 * optional H128 hi = 1;
 * @return {?proto.types.H128}
 */
proto.types.H256.prototype.getHi = function() {
  return /** @type{?proto.types.H128} */ (
    jspb.Message.getWrapperField(this, proto.types.H128, 1));
};


/**
 * @param {?proto.types.H128|undefined} value
 * @return {!proto.types.H256} returns this
*/
proto.types.H256.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H256} returns this
 */
proto.types.H256.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H256.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H128 lo = 2;
 * @return {?proto.types.H128}
 */
proto.types.H256.prototype.getLo = function() {
  return /** @type{?proto.types.H128} */ (
    jspb.Message.getWrapperField(this, proto.types.H128, 2));
};


/**
 * @param {?proto.types.H128|undefined} value
 * @return {!proto.types.H256} returns this
*/
proto.types.H256.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H256} returns this
 */
proto.types.H256.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H256.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H512.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H512.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H512} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H512.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H256.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H512}
 */
proto.types.H512.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H512;
  return proto.types.H512.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H512} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H512}
 */
proto.types.H512.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H512.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H512.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H512} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H512.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
};


/**
 * optional H256 hi = 1;
 * @return {?proto.types.H256}
 */
proto.types.H512.prototype.getHi = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 1));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.H512} returns this
*/
proto.types.H512.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H512} returns this
 */
proto.types.H512.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H512.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H256 lo = 2;
 * @return {?proto.types.H256}
 */
proto.types.H512.prototype.getLo = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 2));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.H512} returns this
*/
proto.types.H512.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H512} returns this
 */
proto.types.H512.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H512.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H1024.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H1024.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H1024} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H1024.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H512.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H512.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H1024}
 */
proto.types.H1024.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H1024;
  return proto.types.H1024.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H1024} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H1024}
 */
proto.types.H1024.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H512;
      reader.readMessage(value,proto.types.H512.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H512;
      reader.readMessage(value,proto.types.H512.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H1024.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H1024.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H1024} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H1024.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H512.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H512.serializeBinaryToWriter
    );
  }
};


/**
 * optional H512 hi = 1;
 * @return {?proto.types.H512}
 */
proto.types.H1024.prototype.getHi = function() {
  return /** @type{?proto.types.H512} */ (
    jspb.Message.getWrapperField(this, proto.types.H512, 1));
};


/**
 * @param {?proto.types.H512|undefined} value
 * @return {!proto.types.H1024} returns this
*/
proto.types.H1024.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H1024} returns this
 */
proto.types.H1024.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H1024.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H512 lo = 2;
 * @return {?proto.types.H512}
 */
proto.types.H1024.prototype.getLo = function() {
  return /** @type{?proto.types.H512} */ (
    jspb.Message.getWrapperField(this, proto.types.H512, 2));
};


/**
 * @param {?proto.types.H512|undefined} value
 * @return {!proto.types.H1024} returns this
*/
proto.types.H1024.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H1024} returns this
 */
proto.types.H1024.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H1024.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.H2048.prototype.toObject = function(opt_includeInstance) {
  return proto.types.H2048.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.H2048} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H2048.toObject = function(includeInstance, msg) {
  var f, obj = {
    hi: (f = msg.getHi()) && proto.types.H1024.toObject(includeInstance, f),
    lo: (f = msg.getLo()) && proto.types.H1024.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.H2048}
 */
proto.types.H2048.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.H2048;
  return proto.types.H2048.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.H2048} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.H2048}
 */
proto.types.H2048.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H1024;
      reader.readMessage(value,proto.types.H1024.deserializeBinaryFromReader);
      msg.setHi(value);
      break;
    case 2:
      var value = new proto.types.H1024;
      reader.readMessage(value,proto.types.H1024.deserializeBinaryFromReader);
      msg.setLo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.H2048.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.H2048.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.H2048} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.H2048.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H1024.serializeBinaryToWriter
    );
  }
  f = message.getLo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H1024.serializeBinaryToWriter
    );
  }
};


/**
 * optional H1024 hi = 1;
 * @return {?proto.types.H1024}
 */
proto.types.H2048.prototype.getHi = function() {
  return /** @type{?proto.types.H1024} */ (
    jspb.Message.getWrapperField(this, proto.types.H1024, 1));
};


/**
 * @param {?proto.types.H1024|undefined} value
 * @return {!proto.types.H2048} returns this
*/
proto.types.H2048.prototype.setHi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H2048} returns this
 */
proto.types.H2048.prototype.clearHi = function() {
  return this.setHi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H2048.prototype.hasHi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H1024 lo = 2;
 * @return {?proto.types.H1024}
 */
proto.types.H2048.prototype.getLo = function() {
  return /** @type{?proto.types.H1024} */ (
    jspb.Message.getWrapperField(this, proto.types.H1024, 2));
};


/**
 * @param {?proto.types.H1024|undefined} value
 * @return {!proto.types.H2048} returns this
*/
proto.types.H2048.prototype.setLo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.H2048} returns this
 */
proto.types.H2048.prototype.clearLo = function() {
  return this.setLo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.H2048.prototype.hasLo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.VersionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.types.VersionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.VersionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.VersionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    patch: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.VersionReply}
 */
proto.types.VersionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.VersionReply;
  return proto.types.VersionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.VersionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.VersionReply}
 */
proto.types.VersionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.VersionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.VersionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.VersionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.VersionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPatch();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 major = 1;
 * @return {number}
 */
proto.types.VersionReply.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.VersionReply} returns this
 */
proto.types.VersionReply.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minor = 2;
 * @return {number}
 */
proto.types.VersionReply.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.VersionReply} returns this
 */
proto.types.VersionReply.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 patch = 3;
 * @return {number}
 */
proto.types.VersionReply.prototype.getPatch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.VersionReply} returns this
 */
proto.types.VersionReply.prototype.setPatch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.ExecutionPayload.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ExecutionPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ExecutionPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ExecutionPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ExecutionPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    parenthash: (f = msg.getParenthash()) && proto.types.H256.toObject(includeInstance, f),
    coinbase: (f = msg.getCoinbase()) && proto.types.H160.toObject(includeInstance, f),
    stateroot: (f = msg.getStateroot()) && proto.types.H256.toObject(includeInstance, f),
    receiptroot: (f = msg.getReceiptroot()) && proto.types.H256.toObject(includeInstance, f),
    logsbloom: (f = msg.getLogsbloom()) && proto.types.H2048.toObject(includeInstance, f),
    prevrandao: (f = msg.getPrevrandao()) && proto.types.H256.toObject(includeInstance, f),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    gasused: jspb.Message.getFieldWithDefault(msg, 9, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    extradata: msg.getExtradata_asB64(),
    basefeepergas: (f = msg.getBasefeepergas()) && proto.types.H256.toObject(includeInstance, f),
    blockhash: (f = msg.getBlockhash()) && proto.types.H256.toObject(includeInstance, f),
    transactionsList: msg.getTransactionsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ExecutionPayload}
 */
proto.types.ExecutionPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ExecutionPayload;
  return proto.types.ExecutionPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ExecutionPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ExecutionPayload}
 */
proto.types.ExecutionPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setParenthash(value);
      break;
    case 2:
      var value = new proto.types.H160;
      reader.readMessage(value,proto.types.H160.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 3:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setStateroot(value);
      break;
    case 4:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setReceiptroot(value);
      break;
    case 5:
      var value = new proto.types.H2048;
      reader.readMessage(value,proto.types.H2048.deserializeBinaryFromReader);
      msg.setLogsbloom(value);
      break;
    case 6:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setPrevrandao(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGaslimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasused(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtradata(value);
      break;
    case 12:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setBasefeepergas(value);
      break;
    case 13:
      var value = new proto.types.H256;
      reader.readMessage(value,proto.types.H256.deserializeBinaryFromReader);
      msg.setBlockhash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ExecutionPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ExecutionPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ExecutionPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ExecutionPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParenthash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.H160.serializeBinaryToWriter
    );
  }
  f = message.getStateroot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getReceiptroot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getLogsbloom();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.types.H2048.serializeBinaryToWriter
    );
  }
  f = message.getPrevrandao();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getGaslimit();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getGasused();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getExtradata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getBasefeepergas();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getBlockhash();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.types.H256.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      14,
      f
    );
  }
};


/**
 * optional H256 parentHash = 1;
 * @return {?proto.types.H256}
 */
proto.types.ExecutionPayload.prototype.getParenthash = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 1));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setParenthash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearParenthash = function() {
  return this.setParenthash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasParenthash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional H160 coinbase = 2;
 * @return {?proto.types.H160}
 */
proto.types.ExecutionPayload.prototype.getCoinbase = function() {
  return /** @type{?proto.types.H160} */ (
    jspb.Message.getWrapperField(this, proto.types.H160, 2));
};


/**
 * @param {?proto.types.H160|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setCoinbase = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearCoinbase = function() {
  return this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional H256 stateRoot = 3;
 * @return {?proto.types.H256}
 */
proto.types.ExecutionPayload.prototype.getStateroot = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 3));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setStateroot = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearStateroot = function() {
  return this.setStateroot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasStateroot = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional H256 receiptRoot = 4;
 * @return {?proto.types.H256}
 */
proto.types.ExecutionPayload.prototype.getReceiptroot = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 4));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setReceiptroot = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearReceiptroot = function() {
  return this.setReceiptroot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasReceiptroot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional H2048 logsBloom = 5;
 * @return {?proto.types.H2048}
 */
proto.types.ExecutionPayload.prototype.getLogsbloom = function() {
  return /** @type{?proto.types.H2048} */ (
    jspb.Message.getWrapperField(this, proto.types.H2048, 5));
};


/**
 * @param {?proto.types.H2048|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setLogsbloom = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearLogsbloom = function() {
  return this.setLogsbloom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasLogsbloom = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional H256 prevRandao = 6;
 * @return {?proto.types.H256}
 */
proto.types.ExecutionPayload.prototype.getPrevrandao = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 6));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setPrevrandao = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearPrevrandao = function() {
  return this.setPrevrandao(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasPrevrandao = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 blockNumber = 7;
 * @return {number}
 */
proto.types.ExecutionPayload.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 gasLimit = 8;
 * @return {number}
 */
proto.types.ExecutionPayload.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.setGaslimit = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 gasUsed = 9;
 * @return {number}
 */
proto.types.ExecutionPayload.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.setGasused = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 timestamp = 10;
 * @return {number}
 */
proto.types.ExecutionPayload.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes extraData = 11;
 * @return {string}
 */
proto.types.ExecutionPayload.prototype.getExtradata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes extraData = 11;
 * This is a type-conversion wrapper around `getExtradata()`
 * @return {string}
 */
proto.types.ExecutionPayload.prototype.getExtradata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtradata()));
};


/**
 * optional bytes extraData = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtradata()`
 * @return {!Uint8Array}
 */
proto.types.ExecutionPayload.prototype.getExtradata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtradata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.setExtradata = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional H256 baseFeePerGas = 12;
 * @return {?proto.types.H256}
 */
proto.types.ExecutionPayload.prototype.getBasefeepergas = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 12));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setBasefeepergas = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearBasefeepergas = function() {
  return this.setBasefeepergas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasBasefeepergas = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional H256 blockHash = 13;
 * @return {?proto.types.H256}
 */
proto.types.ExecutionPayload.prototype.getBlockhash = function() {
  return /** @type{?proto.types.H256} */ (
    jspb.Message.getWrapperField(this, proto.types.H256, 13));
};


/**
 * @param {?proto.types.H256|undefined} value
 * @return {!proto.types.ExecutionPayload} returns this
*/
proto.types.ExecutionPayload.prototype.setBlockhash = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearBlockhash = function() {
  return this.setBlockhash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.ExecutionPayload.prototype.hasBlockhash = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated bytes transactions = 14;
 * @return {!Array<string>}
 */
proto.types.ExecutionPayload.prototype.getTransactionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * repeated bytes transactions = 14;
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array<string>}
 */
proto.types.ExecutionPayload.prototype.getTransactionsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionsList()));
};


/**
 * repeated bytes transactions = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.ExecutionPayload.prototype.getTransactionsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.setTransactionsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.addTransactions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.ExecutionPayload} returns this
 */
proto.types.ExecutionPayload.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.NodeInfoPorts.prototype.toObject = function(opt_includeInstance) {
  return proto.types.NodeInfoPorts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.NodeInfoPorts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.NodeInfoPorts.toObject = function(includeInstance, msg) {
  var f, obj = {
    discovery: jspb.Message.getFieldWithDefault(msg, 1, 0),
    listener: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.NodeInfoPorts}
 */
proto.types.NodeInfoPorts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.NodeInfoPorts;
  return proto.types.NodeInfoPorts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.NodeInfoPorts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.NodeInfoPorts}
 */
proto.types.NodeInfoPorts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiscovery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setListener(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.NodeInfoPorts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.NodeInfoPorts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.NodeInfoPorts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.NodeInfoPorts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscovery();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListener();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 discovery = 1;
 * @return {number}
 */
proto.types.NodeInfoPorts.prototype.getDiscovery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.NodeInfoPorts} returns this
 */
proto.types.NodeInfoPorts.prototype.setDiscovery = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 listener = 2;
 * @return {number}
 */
proto.types.NodeInfoPorts.prototype.getListener = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.NodeInfoPorts} returns this
 */
proto.types.NodeInfoPorts.prototype.setListener = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.NodeInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.types.NodeInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.NodeInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.NodeInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    enr: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ports: (f = msg.getPorts()) && proto.types.NodeInfoPorts.toObject(includeInstance, f),
    listeneraddr: jspb.Message.getFieldWithDefault(msg, 6, ""),
    protocols: msg.getProtocols_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.NodeInfoReply}
 */
proto.types.NodeInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.NodeInfoReply;
  return proto.types.NodeInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.NodeInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.NodeInfoReply}
 */
proto.types.NodeInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnr(value);
      break;
    case 5:
      var value = new proto.types.NodeInfoPorts;
      reader.readMessage(value,proto.types.NodeInfoPorts.deserializeBinaryFromReader);
      msg.setPorts(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setListeneraddr(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.NodeInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.NodeInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.NodeInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.NodeInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEnr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPorts();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.types.NodeInfoPorts.serializeBinaryToWriter
    );
  }
  f = message.getListeneraddr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProtocols_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string enode = 3;
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getEnode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.setEnode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string enr = 4;
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getEnr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.setEnr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional NodeInfoPorts ports = 5;
 * @return {?proto.types.NodeInfoPorts}
 */
proto.types.NodeInfoReply.prototype.getPorts = function() {
  return /** @type{?proto.types.NodeInfoPorts} */ (
    jspb.Message.getWrapperField(this, proto.types.NodeInfoPorts, 5));
};


/**
 * @param {?proto.types.NodeInfoPorts|undefined} value
 * @return {!proto.types.NodeInfoReply} returns this
*/
proto.types.NodeInfoReply.prototype.setPorts = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.clearPorts = function() {
  return this.setPorts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.NodeInfoReply.prototype.hasPorts = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string listenerAddr = 6;
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getListeneraddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.setListeneraddr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes protocols = 7;
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getProtocols = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes protocols = 7;
 * This is a type-conversion wrapper around `getProtocols()`
 * @return {string}
 */
proto.types.NodeInfoReply.prototype.getProtocols_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtocols()));
};


/**
 * optional bytes protocols = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtocols()`
 * @return {!Uint8Array}
 */
proto.types.NodeInfoReply.prototype.getProtocols_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtocols()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.NodeInfoReply} returns this
 */
proto.types.NodeInfoReply.prototype.setProtocols = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.PeerInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PeerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PeerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PeerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PeerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    enr: jspb.Message.getFieldWithDefault(msg, 4, ""),
    capsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    connlocaladdr: jspb.Message.getFieldWithDefault(msg, 6, ""),
    connremoteaddr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    connisinbound: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    connistrusted: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    connisstatic: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PeerInfo}
 */
proto.types.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PeerInfo;
  return proto.types.PeerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PeerInfo}
 */
proto.types.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnr(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addCaps(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnlocaladdr(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnremoteaddr(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnisinbound(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnistrusted(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnisstatic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEnr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCapsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getConnlocaladdr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getConnremoteaddr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getConnisinbound();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getConnistrusted();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getConnisstatic();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.types.PeerInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.types.PeerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string enode = 3;
 * @return {string}
 */
proto.types.PeerInfo.prototype.getEnode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setEnode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string enr = 4;
 * @return {string}
 */
proto.types.PeerInfo.prototype.getEnr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setEnr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string caps = 5;
 * @return {!Array<string>}
 */
proto.types.PeerInfo.prototype.getCapsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setCapsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.addCaps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.clearCapsList = function() {
  return this.setCapsList([]);
};


/**
 * optional string connLocalAddr = 6;
 * @return {string}
 */
proto.types.PeerInfo.prototype.getConnlocaladdr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setConnlocaladdr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string connRemoteAddr = 7;
 * @return {string}
 */
proto.types.PeerInfo.prototype.getConnremoteaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setConnremoteaddr = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool connIsInbound = 8;
 * @return {boolean}
 */
proto.types.PeerInfo.prototype.getConnisinbound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setConnisinbound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool connIsTrusted = 9;
 * @return {boolean}
 */
proto.types.PeerInfo.prototype.getConnistrusted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setConnistrusted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool connIsStatic = 10;
 * @return {boolean}
 */
proto.types.PeerInfo.prototype.getConnisstatic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.PeerInfo} returns this
 */
proto.types.PeerInfo.prototype.setConnisstatic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


goog.object.extend(exports, proto.types);
